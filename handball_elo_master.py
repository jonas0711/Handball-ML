#!/usr/bin/env python3
"""
üèÜ MASTER H√ÖNDBOL ELO SYSTEM - ULTIMATIV KOMBINATION
=======================================================

KOMBINERER DET BEDSTE FRA ALLE SYSTEMER:
‚úÖ Korrekt m√•lvogter identifikation (Goalkeeper-Optimized)
‚úÖ Avanceret kontekst v√¶gtning (Advanced)  
‚úÖ Robust rating system (Ultimate)
‚úÖ Optimerede K-faktorer (Refined)
‚úÖ 7 standard positioner inkl. m√•lvogtere
‚úÖ Momentum tracking og performance bonuser
‚úÖ Linear Elo model med bias reduktion
‚úÖ Multi-level validation og error handling

DET ULTIMATIVE H√ÖNDBOL ELO SYSTEM!
"""

import pandas as pd
import numpy as np
import sqlite3
import os
from collections import defaultdict, Counter
from typing import Dict, List, Tuple, Optional, Set
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

print("üèÜ MASTER H√ÖNDBOL ELO SYSTEM - ULTIMATIV KOMBINATION")
print("=" * 80)

class MasterHandballEloSystem:
    """
    Ultimativt h√•ndbol ELO system - kombinerer alle bedste features
    """
    
    def __init__(self, base_dir: str = "."):
        """Initialiserer master ELO system"""
        print("üéØ Initialiserer Master H√•ndbol ELO System...")
        
        self.base_dir = base_dir
        self.database_dir = os.path.join(base_dir, "Herreliga-database")
        
        # === POSITIONSDEFINITIONER (data.md korrekt) ===
        # M√•lvogtere identificeres gennem nr_mv/mv felter!
        self.field_positions = {
            'VF': 'Venstre fl√∏j',
            'HF': 'H√∏jre fl√∏j', 
            'VB': 'Venstre back',
            'PL': 'Playmaker',
            'HB': 'H√∏jre back',
            'ST': 'Streg',
            'Gbr': 'Gennembrud',
            '1:e': 'F√∏rste b√∏lge',
            '2:e': 'Anden b√∏lge'
        }
        
        # Standard 7 h√•ndboldpositioner
        self.standard_positions = {
            'MV': 'M√•lvogter',      # Identificeres gennem nr_mv/mv
            'VF': 'Venstre fl√∏j',
            'HF': 'H√∏jre fl√∏j',
            'VB': 'Venstre back',
            'PL': 'Playmaker',
            'HB': 'H√∏jre back',
            'ST': 'Streg'
        }
        
        # KUN RENE POSITIONER ACCEPTERES - situationsspecifikke ignoreres
        # Gbr, 1:e, 2:e og tomme positioner t√¶lles ikke i position tracking
        self.pure_positions = {'VF', 'HF', 'VB', 'PL', 'HB', 'ST'}
        
        # === OPTIMEREDE SYSTEM PARAMETRE ===
        
        # K-faktorer (perfekt balancerede)
        self.k_factors = {
            'team': 14,          # Team K-faktor (reduceret for stabilitet)
            'player': 8,         # Udspiller K-faktor (√∏get for responsivitet)
            'goalkeeper': 6      # M√•lvogter K-faktor (√∏get for balance)
        }
        
        # Rating bounds (DRAMATISK udvidet range for st√∏rre spredning)
        self.rating_bounds = {
            'min': 800,             # LAVERE minimum for st√∏rre spredning
            'max': 3000,            # ENDNU H√òJERE max for ekstraordin√¶re spillere
            'default_team': 1350,   # Standard team rating
            'default_player': 1200, # Standard udspiller
            'default_goalkeeper': 1250, # M√•lvogtere starter h√∏jere
            'elite_threshold': 1700,    # REDUCERET elite t√¶rskel - f√¶rre "elite"
            'legendary_threshold': 2100 # REDUCERET legendary t√¶rskel - mere eksklusivt
        }
        
        # Scale faktorer (√òGET for st√∏rre rating √¶ndringer og spredning)
        self.scale_factors = {
            'team': 0.012,       # √òGET team action impact
            'player': 0.008,     # √òGET player action impact  
            'goalkeeper': 0.010, # √òGET m√•lvogter action impact
            'max_change': 16     # √òGET max rating √¶ndring per action
        }
        
        # Elite progression multipliers (MEGET sv√¶rere progression for at undg√• for mange elite)
        self.elite_scaling = {
            'normal': 1.0,       # Under 1700: normal progression
            'elite': 0.6,        # 1700-2100: 40% sv√¶rere (√∏get fra 30%)
            'legendary': 0.3     # Over 2100: 70% sv√¶rere (√∏get fra 60%)
        }
        
        # === PERFEKT BALANCEREDE ACTION V√ÜGTE ===
        # KRITISK: Separata v√¶gte for skyttere vs m√•lvogtere
        
        self.action_weights = {
            # === POSITIVE HANDLINGER FOR UDSPILLERE ===
            'M√•l': 65,                         # Reduceret fra 80 for balance
            'Assist': 55,                      # Reduceret fra 60
            'M√•l p√• straffe': 60,              # Reduceret fra 70
            'Bold erobret': 40,                # Reduceret fra 45
            'Blok af (ret)': 35,               # Reduceret fra 40
            'Blokeret af': 30,                 # Reduceret fra 35
            'Tilkendt straffe': 25,            # Reduceret fra 30
            'Retur': 20,                       # Reduceret fra 25
            'For√•rs. str.': -35,               # Flyttet fra negativ sektion
            
            # === POSITIVE HANDLINGER FOR M√ÖLVOGTERE (REBALANCERET!) ===
            'Skud reddet': 45,                 # REDUCERET fra 85 - var alt for h√∏jt!
            'Straffekast reddet': 65,          # REDUCERET fra 120 - var alt for h√∏jt!
            
            # === NEUTRALE/SVAGT NEGATIVE ===
            'Skud p√• stolpe': -5,              # √òget fra -3
            'Straffekast p√• stolpe': -10,      # √òget fra -8
            'Skud blokeret': -8,               # Reduceret fra -12
            
            # === MODERATE NEGATIVE HANDLINGER ===
            'Skud forbi': -15,                 # Reduceret fra -18
            'Straffekast forbi': -25,          # Reduceret fra -30
            'Passivt spil': -20,               # Reduceret fra -22
            'Regelfejl': -22,                  # Reduceret fra -25
            'Tabt bold': -25,                  # Reduceret fra -30
            'Fejlaflevering': -30,             # Reduceret fra -35
            
            # === DISCIPLIN√ÜRE STRAFFE ===
            'Advarsel': -15,                   # Reduceret fra -18
            'Udvisning': -45,                  # Reduceret fra -55
            'Udvisning (2x)': -75,             # Reduceret fra -90
            'Bl√•t kort': -60,                  # Reduceret fra -70
            'R√∏dt kort': -90,                  # Reduceret fra -110
            'R√∏dt kort, direkte': -90,         # Reduceret fra -110
            'Protest': -20,                    # Reduceret fra -25
            
            # === ADMINISTRATIVE (NEUTRALE) ===
            'Time out': 0, 'Start 1:e halvleg': 0, 'Halvleg': 0,
            'Start 2:e halvleg': 0, 'Fuld tid': 0, 'Kamp slut': 0,
            'Video Proof': 0, 'Video Proof slut': 0, 'Start': 0
        }
        
        # === KRITISK: M√ÖLVOGTER-SPECIFIKKE V√ÜGTE (MODERERET!) ===
        # N√•r modstanderen scorer MOD m√•lvogteren - MODERAT STRAF
        self.goalkeeper_penalty_weights = {
            'M√•l': -25,                        # √òGET fra -15 - mere realistisk straf
            'M√•l p√• straffe': -30,             # √òGET fra -20 - straffe skal stadig straffe
            'Skud p√• stolpe': 15,              # REDUCERET fra 25 - var for h√∏jt
            'Straffekast p√• stolpe': 20,       # REDUCERET fra 35 - var for h√∏jt
        }
        
        # === POSITIONSSPECIFIKKE MULTIPLIERS ===
        # REGULERET FOR POSITION BALANCE - REDUCERET BIAS
        
        self.position_multipliers = {
            'MV': {  # M√ÖLVOGTER - REBALANCERET TIL REALISTISK NIVEAU
                'name': 'M√•lvogter',
                'role': 'Defensiv specialist og sidste linje - KRITISK for h√•ndbold',
                
                # MODERATE BONUSER for redninger (ikke for h√∏jt!)
                'Skud reddet': 2.2,                # KRAFTIGT REDUCERET fra 6.5 - var alt for h√∏jt!
                'Straffekast reddet': 2.8,          # KRAFTIGT REDUCERET fra 8.0 - var alt for h√∏jt!
                'Skud p√• stolpe': 1.8,              # KRAFTIGT REDUCERET fra 4.5 - var alt for h√∏jt!
                'Straffekast p√• stolpe': 2.2,       # KRAFTIGT REDUCERET fra 6.0 - var alt for h√∏jt!
                
                # SCORENDE M√ÖLVOGTER (sj√¶ldent men v√¶rdifuldt)
                'M√•l': 2.0,                         # REDUCERET fra 3.5 - var for h√∏jt
                'Assist': 1.5,                      # REDUCERET fra 2.2 - var for h√∏jt
                'Bold erobret': 1.3,                # REDUCERET fra 2.0 - var for h√∏jt
                
                # NORMALE STRAFFE (m√•lvogtere skal ogs√• have konsekvenser)
                'Fejlaflevering': 0.8,              # √òGET fra 0.5 - mere realistisk
                'Tabt bold': 0.8,                   # √òGET fra 0.5 - mere realistisk
                'Regelfejl': 0.9,                   # √òGET fra 0.6 - mere realistisk
                
                'default_action': 1.2               # KRAFTIGT REDUCERET fra 2.5 - var alt for h√∏jt!
            },
            'VF': {  # VENSTRE FL√òJ - JUSTERET FOR BEDRE BALANCE
                'name': 'Venstre fl√∏j',
                'role': 'Hurtig angriber og kontraspil',
                
                'M√•l': 1.3,                         # REDUCERET lidt fra 1.4
                'Bold erobret': 1.4,                # REDUCERET lidt fra 1.5
                'Retur': 1.2,                       # REDUCERET lidt fra 1.3
                'Assist': 1.0,                      # U√¶ndret
                'Tilkendt straffe': 1.1,            # REDUCERET lidt fra 1.2
                
                'Skud forbi': 1.1,                  # U√¶ndret
                'Straffekast forbi': 1.0,           # U√¶ndret
                'Skud blokeret': 1.0,               # U√¶ndret
                
                'default_action': 1.0               # U√¶ndret - rimelig balance
            },
            'HF': {  # H√òJRE FL√òJ - JUSTERET FOR BEDRE BALANCE
                'name': 'H√∏jre fl√∏j',
                'role': 'Hurtig angriber og kontraspil',
                
                # SAMME SOM VENSTRE FL√òJ (justeret)
                'M√•l': 1.3, 'Bold erobret': 1.4, 'Retur': 1.2,
                'Assist': 1.0, 'Tilkendt straffe': 1.1,
                'Skud forbi': 1.1, 'Straffekast forbi': 1.0, 'Skud blokeret': 1.0,
                'default_action': 1.0               # U√¶ndret - rimelig balance
            },
            'VB': {  # VENSTRE BACK - REDUCERET LIGESOM HB (F√Ö SPILLERE = NATURLIGT LAV RATING)
                'name': 'Venstre back',
                'role': 'Defensiv organisator og opbygger',
                
                # SAMME REDUCEREDE V√ÜRDIER SOM HB (f√• VB spillere = naturligt lave ratings)
                'Bold erobret': 1.0,                # REDUCERET fra 3.0 - samme som HB
                'Blokeret af': 0.8,                 # REDUCERET fra 2.8 - samme som HB
                'Blok af (ret)': 0.8,               # REDUCERET fra 2.8 - samme som HB
                'Assist': 0.8,                      # REDUCERET fra 2.5 - samme som HB
                'Tilkendt straffe': 0.7,            # REDUCERET fra 2.2 - samme som HB
                
                # √òGEDE STRAFFE for balance - samme som HB
                'Fejlaflevering': 1.5,              # √òGET fra 0.5 - samme som HB
                'Tabt bold': 1.4,                   # √òGET fra 0.5 - samme som HB
                'For√•rs. str.': 1.4,                # √òGET fra 0.5 - samme som HB
                
                'M√•l': 0.7,                         # REDUCERET fra 2.2 - samme som HB
                
                'default_action': 0.7               # REDUCERET fra 1.6 - samme som HB
            },
            'PL': {  # PLAYMAKER - KRAFTIGT REDUCERET (VAR #1.6 - ALT FOR H√òJT!)
                'name': 'Playmaker',
                'role': 'Kreativ dirigent og spillets hjerne',
                
                'Assist': 1.0,                      # KRAFTIGT REDUCERET fra 1.3 - var systematisk overvurderet
                'Tilkendt straffe': 0.8,            # KRAFTIGT REDUCERET fra 1.1 - for h√∏jt
                'Bold erobret': 0.8,                # KRAFTIGT REDUCERET fra 1.0 - for h√∏jt
                
                'M√•l': 0.7,                         # KRAFTIGT REDUCERET fra 0.9 - PL har for h√∏je ratings
                
                # DRAMATISK √òGEDE STRAFFE for at balance aggressive reduktion
                'Fejlaflevering': 1.6,              # KRAFTIGT √òGET fra 1.4 - mere straf
                'Tabt bold': 1.5,                   # KRAFTIGT √òGET fra 1.3 - mere straf  
                'For√•rs. str.': 1.4,                # KRAFTIGT √òGET fra 1.2 - mere straf
                'Regelfejl': 1.4,                   # KRAFTIGT √òGET fra 1.2 - mere straf
                'Passivt spil': 1.3,                # KRAFTIGT √òGET fra 1.1 - mere straf
                
                'default_action': 0.65              # DRAMATISK REDUCERET fra 0.85 - kraftig PL nedjustering
            },
            'HB': {  # H√òJRE BACK - KRAFTIGT REDUCERET (VAR #7.1 - FOR H√òJT!)
                'name': 'H√∏jre back',
                'role': 'Defensiv organisator og opbygger',
                
                # KRAFTIGT REDUCEREDE V√ÜRDIER (HB systematisk overvurderet)
                'Bold erobret': 1.0,                # KRAFTIGT REDUCERET fra 1.3
                'Blokeret af': 0.8,                 # KRAFTIGT REDUCERET fra 1.1
                'Blok af (ret)': 0.8,               # KRAFTIGT REDUCERET fra 1.1
                'Assist': 0.8,                      # KRAFTIGT REDUCERET fra 1.0
                'Tilkendt straffe': 0.7,            # KRAFTIGT REDUCERET fra 0.9
                
                # DRAMATISK √òGEDE STRAFFE for balance
                'Fejlaflevering': 1.5,              # KRAFTIGT √òGET fra 1.3 - mere straf
                'Tabt bold': 1.4,                   # KRAFTIGT √òGET fra 1.2 - mere straf
                'For√•rs. str.': 1.4,                # KRAFTIGT √òGET fra 1.2 - mere straf
                
                'M√•l': 0.7,                         # KRAFTIGT REDUCERET fra 0.9
                'default_action': 0.7               # KRAFTIGT REDUCERET fra 0.85 - drastisk HB nedjustering
            },
            'ST': {  # STREG - YDERLIGERE REDUCERET (VAR #15.1 - STADIG FOR H√òJT!)
                'name': 'Streg',
                'role': 'Fysisk kriger og m√•lfarlig',
                
                'M√•l': 1.0,                         # YDERLIGERE REDUCERET fra 1.2 - ST for favoriseret
                'Bold erobret': 0.9,                # YDERLIGERE REDUCERET fra 1.1 - var for h√∏jt
                'Tilkendt straffe': 0.8,            # YDERLIGERE REDUCERET fra 1.0 - var for h√∏jt
                'Blokeret af': 0.8,                 # YDERLIGERE REDUCERET fra 1.0 - var for h√∏jt
                'Blok af (ret)': 0.8,               # YDERLIGERE REDUCERET fra 1.0 - var for h√∏jt
                
                # YDERLIGERE √òGEDE STRAFFE for fysisk spil
                'Udvisning': 1.0,                   # √òGET fra 0.9 - mere straf
                'Regelfejl': 1.0,                   # √òGET fra 0.95 - mere straf
                'For√•rs. str.': 1.0,                # √òGET fra 0.95 - mere straf
                
                'Assist': 0.7,                      # YDERLIGERE REDUCERET fra 0.8 - meget lille assist bonus
                
                'default_action': 0.85              # YDERLIGERE REDUCERET fra 0.9 - kraftigere ST reduktion
            }
        }
        
        # === KONTEKST MULTIPLIERS ===
        # Optimeret v√¶gtning baseret p√• situation
        
        # Tid-baserede multipliers
        self.time_multipliers = {
            'early_game': 0.8,    # F√∏rste 20 min (mindre v√¶gt)
            'mid_game': 1.0,      # 20-50 min (normal v√¶gt)
            'late_game': 1.4,     # 50-58 min (h√∏jere v√¶gt)
            'final_phase': 1.8    # Sidste 2 min (afg√∏rende)
        }
        
        # Score-baserede multipliers
        self.score_multipliers = {
            'blowout': 0.65,      # >10 m√•l forskel (mindre betydning)
            'comfortable': 0.9,   # 6-10 m√•l forskel
            'competitive': 1.2,   # 3-5 m√•l forskel
            'tight': 1.5,         # 1-2 m√•l forskel (vigtige actions)
            'tied': 1.7           # Lige (meget vigtige actions)
        }
        
        # === DATA CONTAINERS ===
        
        self.team_elos = defaultdict(lambda: self.rating_bounds['default_team'])
        self.team_games = defaultdict(int)
        
        self.player_elos = defaultdict(lambda: self.rating_bounds['default_player'])
        self.player_games = defaultdict(int)
        self.player_positions = defaultdict(Counter)
        self.player_momentum = defaultdict(list)
        
        # M√•lvogter tracking
        self.confirmed_goalkeepers = set()
        self.goalkeeper_stats = defaultdict(lambda: {
            'saves': 0, 'penalty_saves': 0, 'goals_against': 0,
            'goals_scored': 0, 'appearances': 0
        })
        
        # === INTELLIGENT POSITION TRACKING ===
        # T√¶ller aktioner per position for hver spiller
        self.player_position_actions = defaultdict(lambda: defaultdict(int))
        self.player_goalkeeper_actions = defaultdict(int)  # Specielt for m√•lvogter aktioner
        
        # Performance tracking  
        self.match_results = []
        self.system_stats = {
            'matches_processed': 0,
            'actions_processed': 0,
            'rating_changes': 0,
            'ultra_critical_moments': 0,   # Kontekst >2.5x (EKSTRAORDIN√ÜRT)
            'critical_moments': 0,         # Kontekst >2.0x (KRITISK)
            'high_context_actions': 0,     # Kontekst >1.5x (H√òJ)
            'elite_players': 0,            # Spillere >1700
            'legendary_players': 0,        # Spillere >2100
            'max_rating_reached': 0,       # H√∏jeste rating opn√•et
            'momentum_situations': {       # NYE MOMENTUM STATISTIKKER
                'comebacks': 0,            # Comeback situationer
                'lead_losses': 0,          # F√∏ring-smid situationer
                'leadership_changes': 0,   # Lederskifte situationer
                'critical_errors': 0       # Kritiske fejl situationer
            }
        }
        
        print("‚úÖ Master h√•ndbold system initialiseret")
        print(f"üèê 7 standard h√•ndbold positioner (inkl. m√•lvogtere)")
        print(f"‚öñÔ∏è {len(self.action_weights)} h√•ndbold action v√¶gte optimeret")
        print(f"ü•Ö M√•lvogter K-faktor: {self.k_factors['goalkeeper']} (m√•lvogter fokuseret)")
        print(f"‚è∞ H√•ndbold timing: 60 min (2x30 min), kritiske faser: 28-30 & 58-60 min")
        print(f"üéØ Kontekst multipliers: tid (1.0-3.0x), score (0.65-1.7x)")
        print(f"ü•Ö M√•lvogter redning multipliers: 1.8x (normal) til 2.2x (straffe)")
        print(f"üî• M√•lvogter kritisk bonus: op til 2.5x i slutfasen!")
        print(f"")
        print(f"üèÜ ELITE PROGRESSION SYSTEM:")
        print(f"  üìà Normal progression (<{self.rating_bounds['elite_threshold']}): 100% hastighed")
        print(f"  ‚≠ê Elite progression ({self.rating_bounds['elite_threshold']}-{self.rating_bounds['legendary_threshold']}): 60% hastighed")
        print(f"  üåü Legendary progression (>{self.rating_bounds['legendary_threshold']}): 30% hastighed")
        print(f"  üëë Max rating: {self.rating_bounds['max']} (kun for ekstraordin√¶re spillere)")
        
    def determine_player_team(self, event_data: dict) -> list:
        """
        Bestemmer spillers hold baseret p√• data.md regler
        Returnerer [(player_name, team, is_goalkeeper), ...]
        """
        players_found = []
        
        # === PRIMARY PLAYER (navn_1) ===
        player_1 = str(event_data.get('navn_1', '')).strip()
        if player_1 and player_1 not in ['nan', '', 'None']:
            team_1 = str(event_data.get('hold', '')).strip()
            players_found.append((player_1, team_1, False))
            
        # === SECONDARY PLAYER (navn_2) ===
        player_2 = str(event_data.get('navn_2', '')).strip()
        haendelse_2 = str(event_data.get('haendelse_2', '')).strip()
        
        if player_2 and player_2 not in ['nan', '', 'None'] and haendelse_2:
            team_hold = str(event_data.get('hold', '')).strip()
            
            # Baseret p√• data.md - sekund√¶re h√¶ndelser
            if haendelse_2 in ['Assist']:
                # Samme hold som prim√¶r
                players_found.append((player_2, team_hold, False))
            elif haendelse_2 in ['Bold erobret', 'For√•rs. str.', 'Blokeret af', 'Blok af (ret)']:
                # Modstanderhold
                players_found.append((player_2, "OPPONENT", False))
                
        # === GOALKEEPER (mv) ===
        # KRITISK FIX: Accepter m√•lvogtere hvis mv-feltet er udfyldt, uanset nr_mv
        goalkeeper = str(event_data.get('mv', '')).strip()
        nr_mv = str(event_data.get('nr_mv', '')).strip()
        
        # Accepter m√•lvogter hvis mv-feltet indeholder et navn (mindre restriktiv)
        if (goalkeeper and goalkeeper not in ['nan', '', 'None', '0']):
            # T√¶l m√•lvogter action
            self.player_goalkeeper_actions[goalkeeper] += 1
            # M√•lvogteren tilh√∏rer ALTID det modsatte hold (data.md)
            players_found.append((goalkeeper, "OPPONENT", True))
            
        return players_found
        
    def identify_goalkeeper_by_name(self, player_name: str) -> bool:
        """FORBEDRET: Identificerer m√•lvogter baseret p√• bekr√¶ftet status eller MV aktioner"""
        # KRITISK FIX: Hvis spilleren er bekr√¶ftet m√•lvogter (fra database), accepter det
        if player_name in self.confirmed_goalkeepers:
            return True
            
        # Alternativt: Check om spilleren har betydelige MV aktioner
        if player_name in self.player_position_actions:
            position_counts = self.player_position_actions[player_name]
            mv_actions = position_counts.get('MV', 0)
            total_actions = sum(position_counts.values())
            
            # Hvis spilleren har mindst 60% MV aktioner, klassificer som m√•lvogter (√òGET FRA 20%)
            if total_actions > 0 and mv_actions / total_actions >= 0.6:
                return True
                
        # Check om spilleren har m√•lvogter-specifikke handlinger
        return self.player_goalkeeper_actions.get(player_name, 0) > 0
        
    def update_goalkeeper_from_event(self, event_data: dict):
        """Opdaterer m√•lvogter identification og stats"""
        goalkeeper = str(event_data.get('mv', '')).strip()
        nr_mv = str(event_data.get('nr_mv', '')).strip()
        
        # KRITISK FIX: Accepter m√•lvogter hvis mv-feltet er udfyldt
        if (goalkeeper and goalkeeper not in ['nan', '', 'None', '0']):
            # Registrer som bekr√¶ftet m√•lvogter (midlertidigt)
            self.confirmed_goalkeepers.add(goalkeeper)
            
            # Opdater m√•lvogter statistikker
            haendelse_1 = str(event_data.get('haendelse_1', '')).strip()
            if haendelse_1 == 'Skud reddet':
                self.goalkeeper_stats[goalkeeper]['saves'] += 1
            elif haendelse_1 == 'Straffekast reddet':
                self.goalkeeper_stats[goalkeeper]['penalty_saves'] += 1
            elif haendelse_1 == 'M√•l':
                self.goalkeeper_stats[goalkeeper]['goals_against'] += 1
                
            self.goalkeeper_stats[goalkeeper]['appearances'] += 1
            
    def get_position_for_player(self, player_name: str, pos_field: str, is_goalkeeper: bool) -> str:
        """Bestemmer spillers position - FORBEDRET til at h√•ndtere situationsspecifikke positioner"""
        # F√òRST: Tjek om spilleren er eksplicit markeret som m√•lvogter
        if is_goalkeeper or self.identify_goalkeeper_by_name(player_name):
            return 'MV'
            
        pos_field = str(pos_field).strip()
        
        # Accepter de 6 standard udspiller positioner
        if pos_field in self.pure_positions:
            return pos_field
        
        # KRITISK FIX: Map situationsspecifikke positioner til default udspiller-position
        # Dette sikrer at spillere stadig f√•r ELO selv med situationsspecifikke positioner
        situational_positions = {'1:e', '2:e', 'Gbr', 'Indsk.', 'Udsk.', 'Str.'}
        
        if pos_field in situational_positions or pos_field == '':
            # Hvis det er en m√•lvogter (som Niklas Landin), men position ikke er MV
            if self.identify_goalkeeper_by_name(player_name):
                return 'MV'
            else:
                # For andre spillere, brug en default position (h√∏jre fl√∏j er mest almindelig)
                return 'HF'
        
        # For ukendte positioner, returner default
        return 'HF'
        
    def get_time_multiplier(self, time_str: str) -> float:
        """
        üèê H√ÖNDBOLD-SPECIFIK TID MULTIPLIER
        H√•ndbold er 2x30 minutter = 60 minutter total
        """
        try:
            time_val = float(time_str)
            
            # 1. HALVLEG (0-30 minutter)
            if time_val <= 15:
                return self.time_multipliers['early_game']    # 0-15 min: mindre v√¶gt
            elif time_val <= 27:
                return self.time_multipliers['mid_game']      # 15-27 min: normal v√¶gt  
            elif time_val <= 30:
                return self.time_multipliers['late_game']     # 27-30 min: vigtig slutning 1. halvleg
            
            # HALVLEGSPAUSE (30 min)
            
            # 2. HALVLEG (30-60 minutter)
            elif time_val <= 45:
                return self.time_multipliers['mid_game']      # 30-45 min: normal v√¶gt
            elif time_val <= 57:
                return self.time_multipliers['late_game']     # 45-57 min: vigtig fase
            else:  # 57-60+ minutter
                return self.time_multipliers['final_phase']   # 57-60+ min: KRITISK slutfase
                
        except:
            return 1.0
            
    def get_score_multiplier(self, home_score: int, away_score: int) -> float:
        """Beregner score-baseret multiplier"""
        diff = abs(home_score - away_score)
        
        if diff == 0:
            return self.score_multipliers['tied']
        elif diff <= 2:
            return self.score_multipliers['tight']
        elif diff <= 5:
            return self.score_multipliers['competitive']
        elif diff <= 10:
            return self.score_multipliers['comfortable']
        else:
            return self.score_multipliers['blowout']
            
    def get_position_multiplier(self, position: str, action: str) -> float:
        """Henter positionsspecifik multiplier"""
        pos_multipliers = self.position_multipliers.get(position, {})
        return pos_multipliers.get(action, pos_multipliers.get('default_action', 1.0))
        
    def update_momentum(self, player_name: str, performance: float):
        """Opdaterer spillers momentum (seneste 5 spil)"""
        if player_name not in self.player_momentum:
            self.player_momentum[player_name] = []
            
        self.player_momentum[player_name].append(performance)
        
        # Hold kun seneste 5 spil
        if len(self.player_momentum[player_name]) > 5:
            self.player_momentum[player_name] = self.player_momentum[player_name][-5:]
            
    def get_momentum_multiplier(self, player_name: str) -> float:
        """Beregner momentum multiplier (v√¶gtede gennemsnit)"""
        if player_name not in self.player_momentum:
            return 1.0
            
        recent_performances = self.player_momentum[player_name]
        if len(recent_performances) < 3:
            return 1.0
            
        # V√¶gtede gennemsnit (nyere spil v√¶gte mere)
        weighted_sum = 0
        total_weight = 0
        
        for i, perf in enumerate(reversed(recent_performances)):
            weight = 0.85 ** i  # Decay factor
            weighted_sum += perf * weight
            total_weight += weight
            
        avg_performance = weighted_sum / total_weight if total_weight > 0 else 0
        return 0.9 + 0.2 * max(0, min(1, avg_performance))
        
    def classify_action_type(self, action: str) -> str:
        """
        üéØ KLASSIFICERER HANDLINGER SOM POSITIVE, NEGATIVE ELLER NEUTRALE
        Baseret p√• data.md analyse
        """
        # POSITIVE HANDLINGER (giver fordele/point til spilleren)
        positive_actions = {
            'M√•l', 'Assist', 'M√•l p√• straffe', 'Bold erobret', 'Skud reddet', 
            'Straffekast reddet', 'Blok af (ret)', 'Blokeret af', 'Retur',
            'Tilkendt straffe'  # Getting awarded a penalty is positive
        }
        
        # NEGATIVE HANDLINGER (straffe spilleren)
        negative_actions = {
            'Fejlaflevering', 'Tabt bold', 'Skud forbi', 'Straffekast forbi',
            'Regelfejl', 'Passivt spil', 'Udvisning', 'Udvisning (2x)',
            'Advarsel', 'R√∏dt kort', 'R√∏dt kort, direkte', 'Bl√•t kort',
            'For√•rs. str.'  # Causing penalty is negative
        }
        
        # NEUTRALE/SITUATIONELLE HANDLINGER 
        neutral_actions = {
            'Skud p√• stolpe', 'Straffekast p√• stolpe', 'Skud blokeret',
            'Time out', 'Protest'
        }
        
        if action in positive_actions:
            return 'POSITIVE'
        elif action in negative_actions:
            return 'NEGATIVE'
        else:
            return 'NEUTRAL'
    
    def analyze_momentum_context(self, action: str, time_val: float, 
                                home_score: int, away_score: int,
                                team: str, home_team: str, away_team: str) -> Dict:
        """
        üî• ULTRA-INTELLIGENT MOMENTUM ANALYSE
        
        Detekterer:
        - Comeback situationer (indhente forspring)
        - F√∏ring-smid situationer (tabe forspring)
        - Momentum skift p√• vigtige tidspunkter
        - Score-flow gennem hele kampen
        """
        is_home_team = (team == home_team)
        score_diff = abs(home_score - away_score)
        action_type = self.classify_action_type(action)
        
        # === COMEBACK DETECTION ===
        comeback_multiplier = 1.0
        
        # Check if this could be a comeback situation
        if action_type == 'POSITIVE' and action in ['M√•l', 'M√•l p√• straffe']:
            # Hvis bagudliggende hold scorer
            if is_home_team and home_score < away_score:
                # Hjemmehold er bagud og scorer
                if score_diff >= 5:  # Store comeback
                    comeback_multiplier = 2.2
                elif score_diff >= 3:  # Betydeligt comeback  
                    comeback_multiplier = 1.8
                elif score_diff >= 1:  # Lille comeback
                    comeback_multiplier = 1.4
            elif not is_home_team and away_score < home_score:
                # Udehold er bagud og scorer
                if score_diff >= 5:  # Store comeback
                    comeback_multiplier = 2.2  
                elif score_diff >= 3:  # Betydeligt comeback
                    comeback_multiplier = 1.8
                elif score_diff >= 1:  # Lille comeback
                    comeback_multiplier = 1.4
        
        # === F√òRING-SMID DETECTION ===
        lead_loss_multiplier = 1.0
        
        # Check if this is losing a lead (negative actions when ahead)
        if action_type == 'NEGATIVE':
            if is_home_team and home_score > away_score:
                # Hjemmehold f√∏rer og laver fejl
                if score_diff >= 5:  # Smider stor f√∏ring
                    lead_loss_multiplier = 2.0
                elif score_diff >= 3:  # Smider betydelig f√∏ring
                    lead_loss_multiplier = 1.6
                elif score_diff >= 1:  # Smider lille f√∏ring
                    lead_loss_multiplier = 1.3
            elif not is_home_team and away_score > home_score:
                # Udehold f√∏rer og laver fejl
                if score_diff >= 5:  # Smider stor f√∏ring
                    lead_loss_multiplier = 2.0
                elif score_diff >= 3:  # Smider betydelig f√∏ring
                    lead_loss_multiplier = 1.6
                elif score_diff >= 1:  # Smider lille f√∏ring
                    lead_loss_multiplier = 1.3
        
        # === LEDERSKIFTE DETECTION ===
        leadership_change_multiplier = 1.0
        
        # EKSTREMT vigtige m√•l der skifter lederskab
        if action in ['M√•l', 'M√•l p√• straffe']:
            # Simulating scoring effect
            new_home_score = home_score + (1 if is_home_team else 0)
            new_away_score = away_score + (0 if is_home_team else 1)
            
            # Before: one team leads, After: other team leads or tied
            if home_score > away_score and new_away_score >= new_home_score:
                # Hjemme f√∏rte, nu er ude lig eller foran
                leadership_change_multiplier = 2.5
            elif away_score > home_score and new_home_score >= new_away_score:
                # Ude f√∏rte, nu er hjemme lig eller foran  
                leadership_change_multiplier = 2.5
            elif home_score == away_score:
                # Var lige, nu f√∏rer scorer
                leadership_change_multiplier = 1.8
        
        # === KRITISKE FEJL VED F√òRING ===
        critical_error_multiplier = 1.0
        
        if action_type == 'NEGATIVE' and score_diff <= 2:
            # Kritiske fejl i t√¶tte kampe
            if action in ['Udvisning', 'Udvisning (2x)', 'R√∏dt kort', 'R√∏dt kort, direkte']:
                critical_error_multiplier = 2.0  # Ekstraordin√¶rt skadeligt
            elif action in ['Fejlaflevering', 'Tabt bold', 'For√•rs. str.']:
                critical_error_multiplier = 1.6  # Meget skadeligt
            elif action in ['Regelfejl', 'Passivt spil']:
                critical_error_multiplier = 1.4  # Moderat skadeligt
        
        return {
            'comeback': comeback_multiplier,
            'lead_loss': lead_loss_multiplier, 
            'leadership_change': leadership_change_multiplier,
            'critical_error': critical_error_multiplier,
            'max_multiplier': max(comeback_multiplier, lead_loss_multiplier, 
                                leadership_change_multiplier, critical_error_multiplier)
        }

    def calculate_context_importance(self, action: str, time_str: str, 
                                   home_score: int, away_score: int,
                                   team: str, home_team: str, away_team: str) -> float:
        """
        üèê H√ÖNDBOLD-SPECIFIK KONTEKSTUEL VIGTIGHED
        
        H√ÖNDBOLD TIMING:
        ‚úÖ 1. halvleg: 0-30 minutter  
        ‚úÖ 2. halvleg: 30-60 minutter
        ‚úÖ Kritiske faser: 28-30 min og 58-60 min
        ‚úÖ Momentum analyse gennem HELE kampen
        ‚úÖ M√•lvogter f√•r EKSTRA bonus for redninger i kritiske situationer
        """
        
        try:
            time_val = float(time_str)
        except:
            time_val = 30.0  # Default halvlegsskifte
            
        score_diff = abs(home_score - away_score)
        action_type = self.classify_action_type(action)
        
        # === 1. H√ÖNDBOLD TIMING IMPORTANCE ===
        # Baseret p√• 60 minutters h√•ndboldkamp struktur
        if time_val >= 58:  # Sidste 2 minutter 2. halvleg - EKSTREMT kritisk
            timing_multiplier = 3.0
        elif time_val >= 55:  # 55-58 minutter - meget kritisk slutfase
            timing_multiplier = 2.4
        elif time_val >= 50:  # 50-55 minutter - vigtig slutfase 2. halvleg
            timing_multiplier = 1.8
        elif 28 <= time_val <= 30:  # Sidste 2 minutter 1. halvleg - vigtig
            timing_multiplier = 1.6
        elif 25 <= time_val <= 28:  # Slutning 1. halvleg - moderat vigtig
            timing_multiplier = 1.4
        elif 45 <= time_val <= 50:  # Vigtig fase i 2. halvleg
            timing_multiplier = 1.5
        elif 40 <= time_val <= 45:  # Midten af 2. halvleg
            timing_multiplier = 1.2
        else:  # Andre tidspunkter - standard v√¶gt
            timing_multiplier = 1.0
            
        # === 2. SCORE PROXIMITY IMPORTANCE ===
        # Jo t√¶ttere kamp, jo vigtigere hver aktion
        if score_diff == 0:  # Lige - EKSTREMT vigtigt
            score_proximity = 2.2
        elif score_diff == 1:  # 1 m√•l forskel - meget vigtigt
            score_proximity = 1.9
        elif score_diff == 2:  # 2 m√•l forskel - vigtigt
            score_proximity = 1.6
        elif score_diff <= 4:  # 3-4 m√•l forskel - moderat vigtigt
            score_proximity = 1.3
        elif score_diff <= 6:  # 5-6 m√•l forskel - lidt vigtigt
            score_proximity = 1.1
        else:  # >6 m√•l forskel - mindre vigtigt
            score_proximity = 0.8
            
        # === 3. MOMENTUM ANALYSE (NY!) ===
        momentum_analysis = self.analyze_momentum_context(
            action, time_val, home_score, away_score, team, home_team, away_team
        )
        
        momentum_multiplier = momentum_analysis['max_multiplier']
        
        # === 4. ACTION TYPE SCALING (NY!) ===
        # Negative handlinger f√•r OGS√Ö forst√¶rkning i vigtige situationer
        if action_type == 'POSITIVE':
            action_scaling = 1.0  # Positive handlinger normalt skaleret
        elif action_type == 'NEGATIVE':
            action_scaling = 1.2  # Negative handlinger f√•r EKSTRA straf i vigtige situationer
        else:
            action_scaling = 0.9  # Neutrale handlinger mindre p√•virket
        
        # === 5. SITUATIONAL BONUSES ===
        situation_bonus = 1.0
        
        # Ekstra vigtige situationer
        if time_val >= 55 and score_diff <= 2:
            situation_bonus = 1.4  # Slutspil i t√¶t kamp
        elif time_val >= 50 and score_diff <= 1:
            situation_bonus = 1.3  # T√¶t slutning
        elif score_diff <= 1 and 25 <= time_val <= 32:
            situation_bonus = 1.25  # T√¶t kamp ved halvlegsskifte
        
        # === 6. M√ÖLVOGTER KRITISK SITUATION BONUS (REBALANCERET!) ===
        goalkeeper_critical_bonus = 1.0
        
        # MODERATE BONUS for m√•lvogter redninger - kun i kritiske situationer!
        if action in ['Skud reddet', 'Straffekast reddet']:
            if timing_multiplier >= 2.0 and score_diff <= 1:  # Meget t√¶t slutspil
                goalkeeper_critical_bonus = 1.8  # REDUCERET fra 5.0 - var alt for h√∏jt!
                print(f"      ü•Ö‚ö° M√ÖLVOGTER KRITISK: {action} i t√¶t slutspil ved {time_val:.1f} min!")
            elif timing_multiplier >= 1.8 and score_diff <= 2:  # T√¶t kamp i vigtig fase
                goalkeeper_critical_bonus = 1.5  # REDUCERET fra 3.5 - var alt for h√∏jt!
                print(f"      ü•Öüìà M√ÖLVOGTER VIGTIG: {action} i t√¶t kamp ved {time_val:.1f} min!")
            elif timing_multiplier >= 1.5 and score_diff <= 1:  # Kun meget kritiske situationer
                goalkeeper_critical_bonus = 1.3  # REDUCERET fra 2.5 - kun for virkelig kritiske!
                print(f"      ü•Ö‚ö° M√ÖLVOGTER KRITISK REDNING: {action} ved {time_val:.1f} min!")
            # Fjernet generelle bonuser - kun kritiske situationer!
        
        # === 7. KOMBINER ALLE FAKTORER ===
        context_multiplier = (
            timing_multiplier * 0.25 +       # √òGET TILBAGE: Timing vigtighed
            score_proximity * 0.25 +         # √òGET TILBAGE: Score t√¶thed  
            momentum_multiplier * 0.25 +     # √òGET TILBAGE: Momentum skift
            action_scaling * 0.10 +          # √òGET TILBAGE: Action type scaling
            situation_bonus * 0.10 +         # √òGET TILBAGE: Situational bonuses
            goalkeeper_critical_bonus * 0.05 # REDUCERET TILBAGE fra 24% til 5%!
        )
        
        # Normale bounds - ikke ekstreme l√¶ngere
        context_multiplier = max(0.4, min(5.0, context_multiplier))  # REDUCERET max tilbage til 5.0
        
        # === 7. DEBUG LOG FOR VIGTIGE SITUATIONER ===
        if context_multiplier > 2.0 or momentum_analysis['max_multiplier'] > 1.5:
            situation_type = ""
            if momentum_analysis['comeback'] > 1.5:
                situation_type += "COMEBACK "
            if momentum_analysis['lead_loss'] > 1.5:
                situation_type += "LEAD-LOSS "
            if momentum_analysis['leadership_change'] > 1.5:
                situation_type += "LEADERSHIP-CHANGE "
            if momentum_analysis['critical_error'] > 1.5:
                situation_type += "CRITICAL-ERROR "
                
            current_leader = "HJEMME" if home_score > away_score else "UDE" if away_score > home_score else "LIGE"
            action_marker = "üöÄ" if action_type == 'POSITIVE' else "üí•" if action_type == 'NEGATIVE' else "‚ö°"
            
            print(f"  {action_marker} VIGTIG SITUATION: {action} ({action_type}) ved {time_val:.1f} min")
            print(f"       üìä Score: {home_score}-{away_score} ({current_leader})")
            print(f"       üî• Kontekst: x{context_multiplier:.1f} | {situation_type.strip()}")
            print(f"       üìà Momentum faktorer: comeback:{momentum_analysis['comeback']:.1f}, "
                  f"lead-loss:{momentum_analysis['lead_loss']:.1f}, change:{momentum_analysis['leadership_change']:.1f}")
                  
        return context_multiplier
        
    def process_action(self, action: str, player_name: str, team: str,
                      position: str, time_str: str, home_score: int,
                      away_score: int, is_goalkeeper: bool = False, 
                      home_team: str = "", away_team: str = ""):
        """
        Processerer action med alle optimiseringer + kontekstuel vigtighed
        """
        
        # KRITISK: Separat logik for m√•lvogtere ved m√•l MOD dem
        using_goalkeeper_penalty = is_goalkeeper and action in self.goalkeeper_penalty_weights
        
        if using_goalkeeper_penalty:
            # N√•r modstanderen scorer MOD m√•lvogteren
            base_weight = self.goalkeeper_penalty_weights[action]
        else:
            # Normal action v√¶gt
            base_weight = self.action_weights.get(action, 0)
            
        if base_weight == 0:
            return
            
        # === ALLE MULTIPLIERS INKL. KONTEKST ===
        
        time_mult = self.get_time_multiplier(time_str)
        score_mult = self.get_score_multiplier(home_score, away_score)
        
        # KRITISK FIX: M√•lvogter penalty actions skal IKKE have position eller momentum multiplier  
        if using_goalkeeper_penalty:
            pos_mult = 1.0      # Ingen position multiplier for penalty v√¶gte
            momentum_mult = 1.0 # Ingen momentum multiplier for penalty v√¶gte
        else:
            # Princip 1: ELO Beregning Position-Uafh√¶ngig for markspillere.
            # M√•lvogtere beholder deres unikke multipliers for at anerkende deres specielle rolle.
            if position == 'MV':
                pos_mult = self.get_position_multiplier(position, action)
            else:
                pos_mult = 1.0 # ELO er nu position-agnostisk for markspillere
            
            momentum_mult = self.get_momentum_multiplier(player_name)
        
        # üéØ NYT: KONTEKSTUEL VIGTIGHED
        # KRITISK FIX: M√•lvogter penalty actions skal IKKE have kontekst multiplier
        if using_goalkeeper_penalty:
            context_mult = 1.0  # Ingen kontekst multiplier for penalty v√¶gte
        else:
            context_mult = self.calculate_context_importance(
                action, time_str, home_score, away_score, 
                team, home_team, away_team
            )
        
        # Total v√¶gt med alle multipliers INKL. kontekst
        total_weight = base_weight * time_mult * score_mult * pos_mult * momentum_mult * context_mult
        
        # Debug for test m√•lvogter (kun hvis n√∏dvendigt)
        # if player_name == "TEST_GOALKEEPER":
        #     print(f"      DEBUG M√ÖLVOGTER V√ÜGTE:")
        #     print(f"        base_weight: {base_weight}")
        #     print(f"        total_weight: {total_weight}")
        #     print(f"        using_goalkeeper_penalty: {using_goalkeeper_penalty}")
        
        # === RATING OPDATERINGER ===
        
        current_rating = self.player_elos[player_name]
        
        # S√¶t korrekt default rating for m√•lvogtere
        if is_goalkeeper and current_rating == self.rating_bounds['default_player']:
            self.player_elos[player_name] = self.rating_bounds['default_goalkeeper']
            current_rating = self.rating_bounds['default_goalkeeper']
        
        # V√¶lg K-faktor
        k_factor = self.k_factors['goalkeeper'] if is_goalkeeper else self.k_factors['player']
        
        # === PROGRESSIV SV√ÜRHEDSGRAD FOR ELITE SPILLERE ===
        # Jo h√∏jere rating, jo sv√¶rere at stige yderligere
        if current_rating >= self.rating_bounds['legendary_threshold']:
            elite_multiplier = self.elite_scaling['legendary']
            elite_status = "LEGENDARY"
        elif current_rating >= self.rating_bounds['elite_threshold']:
            elite_multiplier = self.elite_scaling['elite'] 
            elite_status = "ELITE"
        else:
            elite_multiplier = self.elite_scaling['normal']
            elite_status = "NORMAL"
        
        # Beregn rating √¶ndring med elite scaling
        max_change = self.scale_factors['max_change']
        scale = self.scale_factors['goalkeeper'] if is_goalkeeper else self.scale_factors['player']
        
        rating_change = total_weight * scale * elite_multiplier
        rating_change = max(-max_change, min(max_change, rating_change))
        
        # Debug for test m√•lvogter
        # Debug for test m√•lvogter - kun hvis n√∏dvendigt
        # if player_name == "TEST_GOALKEEPER":
        #     print(f"        final_rating_change: {rating_change}")
        
        # Opdater player rating
        new_rating = current_rating + rating_change
        new_rating = max(self.rating_bounds['min'],
                        min(self.rating_bounds['max'], new_rating))
        
        # Debug for test m√•lvogter - kun hvis n√∏dvendigt
        # if player_name == "TEST_GOALKEEPER":
        #     print(f"        current_rating: {current_rating}")
        #     print(f"        final_rating_change: {rating_change}")
            
        self.player_elos[player_name] = new_rating
        
        # KRITISK FIX: Kun opdater position tracking for rene positioner
        if position is not None:
            # Opdater position tracking
            self.player_positions[player_name][position] += 1
            
            # T√¶l aktioner per position for intelligent position detection
            self.player_position_actions[player_name][position] += 1
        
        # Opdater momentum
        perf_score = 0.5 + (rating_change / (2 * max_change))
        self.update_momentum(player_name, perf_score)
        
        # Team rating opdatering (mindre impact)
        team_change = rating_change * 0.2
        team_change = max(-3, min(3, team_change))
        
        if team and team != "OPPONENT":  # Skip placeholder teams
            current_team_rating = self.team_elos[team]
            new_team_rating = current_team_rating + team_change
            new_team_rating = max(self.rating_bounds['min'],
                                 min(self.rating_bounds['max'], new_team_rating))
            
            self.team_elos[team] = new_team_rating
        
        # FORBEDRET SYSTEM STATISTIK med momentum tracking
        self.system_stats['actions_processed'] += 1
        if abs(rating_change) > 1:
            self.system_stats['rating_changes'] += 1
        if context_mult > 2.5:
            self.system_stats['ultra_critical_moments'] += 1
        elif context_mult > 2.0:
            self.system_stats['critical_moments'] += 1
        elif context_mult > 1.5:
            self.system_stats['high_context_actions'] += 1
            
        # Track momentum-specific statistics
        if not hasattr(self.system_stats, 'momentum_situations'):
            self.system_stats['momentum_situations'] = {
                'comebacks': 0, 'lead_losses': 0, 'leadership_changes': 0, 'critical_errors': 0
            }
            
        # Analyze if this was a momentum situation
        momentum_analysis = self.analyze_momentum_context(
            action, float(time_str) if time_str else 30.0,
            home_score, away_score, team, home_team, away_team
        )
        
        if momentum_analysis['comeback'] > 1.5:
            self.system_stats['momentum_situations']['comebacks'] += 1
        if momentum_analysis['lead_loss'] > 1.5:
            self.system_stats['momentum_situations']['lead_losses'] += 1
        if momentum_analysis['leadership_change'] > 1.5:
            self.system_stats['momentum_situations']['leadership_changes'] += 1
        if momentum_analysis['critical_error'] > 1.5:
            self.system_stats['momentum_situations']['critical_errors'] += 1
            
        # Track max rating reached
        if new_rating > self.system_stats['max_rating_reached']:
            self.system_stats['max_rating_reached'] = new_rating
        
        # Debug log for store √¶ndringer MED kontekst og elite info
        if abs(rating_change) > 3:
            gk_marker = "ü•Ö" if is_goalkeeper else ""
            context_info = f"ctx:{context_mult:.1f}x" if context_mult > 1.5 else ""
            elite_info = f"[{elite_status}]" if elite_status != "NORMAL" else ""
            
            # ADVARSEL hvis ikke-m√•lvogter f√•r MV position
            if position == 'MV' and not is_goalkeeper:
                print(f"  ‚ö†Ô∏è  {player_name} FEJL(MV men ikke m√•lvogter): {action} = {rating_change:+.1f} "
                      f"‚Üí {new_rating:.0f}")
            else:
                print(f"  üìä {player_name} {gk_marker}({position}){elite_info}: {action} = {rating_change:+.1f} "
                      f"‚Üí {new_rating:.0f} {context_info}")
                  
    def process_match_database(self, db_path: str) -> bool:
        """Processerer en enkelt kamp database med fuld optimering"""
        try:
            conn = sqlite3.connect(db_path)
            
            # Tjek om tabellerne eksisterer
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            if 'match_info' not in tables or 'match_events' not in tables:
                conn.close()
                print(f"‚ö†Ô∏è  Springer over {db_path} - mangler tabeller")
                return False
            
            match_info = pd.read_sql_query("SELECT * FROM match_info", conn)
            if match_info.empty:
                conn.close()
                return False
                
            events = pd.read_sql_query("SELECT * FROM match_events ORDER BY id", conn)
            if events.empty:
                conn.close()
                return False
                
            conn.close()
            
            home_team = match_info.iloc[0]['hold_hjemme']
            away_team = match_info.iloc[0]['hold_ude']
            result = match_info.iloc[0]['resultat']
            
            try:
                scores = result.split('-')
                final_home = int(scores[0])
                final_away = int(scores[1])
            except:
                return False
                
            current_home = 0
            current_away = 0
            
            # Build team mapping for "OPPONENT" resolution
            team_mapping = {
                home_team: away_team,
                away_team: home_team
            }
            
            # Track players in this match (to count games)
            players_in_match = set()
            
            # Process events med alle optimiseringer
            for _, event in events.iterrows():
                action = str(event.get('haendelse_1', '')).strip()
                if action in ['Halvleg', 'Start 1:e halvleg', 'Start 2:e halvleg',
                             'Fuld tid', 'Kamp slut', '', 'nan']:
                    continue
                    
                # Opdater m√•lvogter identification
                self.update_goalkeeper_from_event(event)
                    
                time_str = str(event.get('tid', '0'))
                pos_field = str(event.get('pos', '')).strip()
                goal_score = str(event.get('maal', '')).strip()
                
                # Opdater current score
                if goal_score and '-' in goal_score:
                    try:
                        parts = goal_score.split('-')
                        current_home = int(parts[0])
                        current_away = int(parts[1])
                    except:
                        pass
                        
                # Find alle spillere i event
                players_in_event = self.determine_player_team(event)
                
                for player_name, team_code, is_goalkeeper in players_in_event:
                    if not player_name or player_name in ['nan', '', 'None']:
                        continue
                        
                    # Resolve "OPPONENT" team
                    if team_code == "OPPONENT":
                        primary_team = str(event.get('hold', '')).strip()
                        if primary_team in team_mapping:
                            team_code = team_mapping[primary_team]
                        else:
                            continue
                    
                    # KRITISK FIX: Track spilleren som deltagende UANSET position
                    # Dette sikrer at spillere t√¶lles som havende spillet kampen,
                    # selv hvis deres handlinger har situationsspecifikke positioner
                    players_in_match.add(player_name)
                    
                    # Bestem position - kun rene positioner bruges til ELO beregning
                    position = self.get_position_for_player(player_name, pos_field, is_goalkeeper)
                    
                    # Skip ELO beregning for situationsspecifikke positioner, men spilleren er stadig talt som deltagende
                    if position is None:
                        continue
                    
                    # Process action med alle optimiseringer + kontekst
                    self.process_action(
                        action, player_name, team_code, position, time_str,
                        current_home, current_away, is_goalkeeper,
                        home_team, away_team
                    )
                
                # KRITISK M√ÖLVOGTER-FIX: Tilf√∏j m√•lvogtere der kun optr√¶der i mv-feltet
                goalkeeper_in_mv = str(event.get('mv', '')).strip()
                if (goalkeeper_in_mv and goalkeeper_in_mv not in ['nan', '', 'None', '0']):
                    if goalkeeper_in_mv not in players_in_match:
                        # M√•lvogteren optr√¶der kun i mv-feltet - tilf√∏j ham til kampen
                        players_in_match.add(goalkeeper_in_mv)
                        print(f"ü•Ö M√ÖLVOGTER-FIX: {goalkeeper_in_mv} tilf√∏jet som deltagende i kampen")
                    
            # Opdater team Elos efter kamp
            self.update_team_elos_post_match(home_team, away_team, final_home, final_away)
            
            # T√¶l kampe for alle spillere der deltog
            for player_name in players_in_match:
                self.player_games[player_name] += 1
            
            self.system_stats['matches_processed'] += 1
            return True
            
        except Exception as e:
            print(f"‚ùå Database fejl i {db_path}: {e}")
            return False
            
    def update_team_elos_post_match(self, home_team: str, away_team: str,
                                   home_score: int, away_score: int):
        """Opdaterer team Elos efter kamp med Linear Elo model"""
        
        home_rating = self.team_elos[home_team]
        away_rating = self.team_elos[away_team]
        
        # Hjemmebane fordel
        adjusted_home_rating = home_rating + 25
        
        # Match resultat
        if home_score > away_score:
            home_result = 1.0
        elif home_score < away_score:
            home_result = 0.0
        else:
            home_result = 0.5
            
        away_result = 1.0 - home_result
        
        # Linear Elo beregning (reduceret bias)
        rating_diff = adjusted_home_rating - away_rating
        
        if rating_diff >= 300:
            expected_home = 1.0
        elif rating_diff <= -350:
            expected_home = 0.0
        else:
            expected_home = 0.55 + 0.0012 * rating_diff
            
        expected_home = max(0.0, min(1.0, expected_home))
        expected_away = 1.0 - expected_home
        
        # Beregn √¶ndringer
        home_change = self.k_factors['team'] * (home_result - expected_home)
        away_change = self.k_factors['team'] * (away_result - expected_away)
        
        # Opdater ratings
        self.team_elos[home_team] = max(
            self.rating_bounds['min'],
            min(self.rating_bounds['max'], home_rating + home_change)
        )
        
        self.team_elos[away_team] = max(
            self.rating_bounds['min'],
            min(self.rating_bounds['max'], away_rating + away_change)
        )
        
        self.team_games[home_team] += 1
        self.team_games[away_team] += 1
        
        # Store match result
        self.match_results.append({
            'home_team': home_team,
            'away_team': away_team,
            'home_score': home_score,
            'away_score': away_score,
            'home_rating_before': home_rating,
            'away_rating_before': away_rating,
            'home_rating_after': self.team_elos[home_team],
            'away_rating_after': self.team_elos[away_team],
            'home_change': home_change,
            'away_change': away_change
        })
        
    def process_season_database(self, season: str) -> int:
        """Processerer alle kampe i en s√¶son"""
        season_path = os.path.join(self.database_dir, season)
        
        if not os.path.exists(season_path):
            print(f"‚ùå S√¶son directory ikke fundet: {season_path}")
            return 0
            
        processed_matches = 0
        db_files = [f for f in os.listdir(season_path) if f.endswith('.db')]
        db_files.sort()
        
        print(f"üèê Processerer s√¶son {season} - {len(db_files)} kampe")
        
        for db_file in db_files:
            db_path = os.path.join(season_path, db_file)
            
            try:
                match_processed = self.process_match_database(db_path)
                if match_processed:
                    processed_matches += 1
                    # Progress update hver 50. kamp
                    if processed_matches % 50 == 0:
                        print(f"   üìà {processed_matches}/{len(db_files)} kampe processeret...")
            except Exception as e:
                print(f"‚ùå Kritisk fejl i {db_file}: {e}")
                continue
                
        print(f"‚úÖ S√¶son {season}: {processed_matches} kampe processeret")
        print(f"ü•Ö M√•lvogtere identificeret: {len(self.confirmed_goalkeepers)}")
        
        return processed_matches
        
    def finalize_player_positions(self):
        """Finaliser spillernes positioner baseret p√• flest aktioner"""
        print("\nüéØ FINALISERER SPILLERPOSITIONER BASERET P√Ö AKTIONER...")
        
        updated_goalkeepers = set()
        position_changes = 0
        
        for player_name in self.player_position_actions:
            position_counts = self.player_position_actions[player_name]
            
            if not position_counts:
                continue
                
            # Find position med flest aktioner
            primary_position = max(position_counts, key=position_counts.get)
            total_actions = sum(position_counts.values())
            primary_percentage = position_counts[primary_position] / total_actions * 100
            
            # Hent m√•lvogter-specifikke stats
            stats = self.goalkeeper_stats.get(player_name, {'saves': 0, 'penalty_saves': 0})
            total_saves = stats.get('saves', 0) + stats.get('penalty_saves', 0)

            # Kun klassificer som m√•lvogter hvis:
            # 1. Prim√¶r position er MV 
            # 2. De har m√•lvogter aktioner
            # 3. Mindst 60% af deres aktioner er p√• MV position
            # 4. De har mindst 5 redninger (skud eller straffe)
            if (primary_position == 'MV' and 
                self.player_goalkeeper_actions.get(player_name, 0) > 0 and
                primary_percentage >= 60 and
                total_saves >= 5):
                
                # REALITY CHECK: Advar hvis en "m√•lvogter" har en unaturlig h√∏j rating
                player_rating = self.player_elos.get(player_name, self.rating_bounds['default_player'])
                if player_rating > 1400:
                    print(f"  ‚ö†Ô∏è  REALITY CHECK: {player_name} opfylder MV-kriterier, men har ELO > 1400 ({player_rating:.0f}). Reklassificeres som markspiller.")
                    position_changes += 1 # T√¶ller som en √¶ndring
                else:
                    updated_goalkeepers.add(player_name)
            
            elif player_name in self.confirmed_goalkeepers:
                # Spiller var f√∏r m√•lvogter men har nu flere aktioner p√• anden position
                position_changes += 1
                gk_actions = self.player_goalkeeper_actions.get(player_name, 0)
                mv_actions = position_counts.get('MV', 0)
                print(f"  üìù {player_name}: MV ‚Üí {primary_position} "
                      f"(MV: {mv_actions} vs {primary_position}: {position_counts[primary_position]} aktioner)")
        
        # Opdater bekr√¶ftede m√•lvogtere
        old_count = len(self.confirmed_goalkeepers)
        self.confirmed_goalkeepers = updated_goalkeepers
        new_count = len(self.confirmed_goalkeepers)
        
        print(f"‚úÖ Position finalisering komplet!")
        print(f"üìä {old_count} ‚Üí {new_count} m√•lvogtere efter intelligent analyse")
        print(f"üîÑ {position_changes} spillere skiftede fra MV til deres faktiske position")
        
    def calculate_all_seasons(self):
        """Beregner Master ELO for alle s√¶soner"""
        print("\nüöÄ STARTER MASTER ELO BEREGNING")
        print("=" * 50)
        
        if not os.path.exists(self.database_dir):
            print(f"‚ùå Database directory ikke fundet: {self.database_dir}")
            return
            
        seasons = [d for d in os.listdir(self.database_dir)
                  if os.path.isdir(os.path.join(self.database_dir, d))]
        seasons.sort()
        
        print(f"üìÖ Fundet {len(seasons)} s√¶soner: {seasons}")
        
        total_matches = 0
        
        for season in seasons:
            matches = self.process_season_database(season)
            total_matches += matches
        
        # Finaliser spillerpositioner baseret p√• faktiske aktioner
        self.finalize_player_positions()
            
        print(f"\n‚úÖ MASTER ELO BEREGNING KOMPLET")
        print(f"üèê Total kampe processeret: {total_matches}")
        print(f"üë• Teams: {len(self.team_elos)}")
        print(f"üèÉ Spillere: {len(self.player_elos)}")
        print(f"ü•Ö M√•lvogtere: {len(self.confirmed_goalkeepers)}")
        print(f"‚ö° Actions processeret: {self.system_stats['actions_processed']}")
        print(f"üìà Rating √¶ndringer: {self.system_stats['rating_changes']}")
        
        self.generate_master_analysis()
        self.save_master_ratings()
        
    def generate_master_analysis(self):
        """Genererer master analyse"""
        print("\nüìä MASTER SYSTEM ANALYSE")
        print("-" * 40)
        
        # Analyser positioner
        position_stats = defaultdict(list)
        
        for player, positions in self.player_positions.items():
            rating = self.player_elos[player]
            primary_pos = positions.most_common(1)[0][0] if positions else 'PL'
            position_stats[primary_pos].append(rating)
            
        # Print position statistik
        for pos in self.standard_positions:
            if pos in position_stats:
                ratings = position_stats[pos]
                avg_rating = np.mean(ratings)
                count = len(ratings)
                min_rating = min(ratings)
                max_rating = max(ratings)
                std_rating = np.std(ratings)
                
                print(f"{pos} ({self.standard_positions[pos]:<12}): "
                      f"{avg_rating:5.0f} avg | {count:3d} spillere | "
                      f"{min_rating:4.0f}-{max_rating:4.0f} | std:{std_rating:4.0f}")
                      
        # M√•lvogter detaljer
        goalkeepers = []
        for goalkeeper in self.confirmed_goalkeepers:
            rating = self.player_elos[goalkeeper]
            stats = self.goalkeeper_stats[goalkeeper]
            goalkeepers.append((goalkeeper, rating, stats))
            
        goalkeepers.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nü•Ö M√ÖLVOGTER DETALJER ({len(goalkeepers)} spillere):")
        if goalkeepers:
            gk_ratings = [rating for _, rating, _ in goalkeepers]
            print(f"üìä Gennemsnit: {np.mean(gk_ratings):.0f}")
            print(f"üìä Standardafvigelse: {np.std(gk_ratings):.0f}")
            print(f"üìä Range: {min(gk_ratings):.0f} - {max(gk_ratings):.0f}")
            
            print("üèÜ Top 10 m√•lvogtere:")
            for i, (name, rating, stats) in enumerate(goalkeepers[:10]):
                saves = stats.get('saves', 0)
                pen_saves = stats.get('penalty_saves', 0)
                goals_against = stats.get('goals_against', 0)
                save_pct = saves / (saves + goals_against) * 100 if (saves + goals_against) > 0 else 0
                print(f"  {i+1:2d}. {name}: {rating:.0f} "
                      f"(Redninger: {saves}, Straffe: {pen_saves}, "
                      f"Rednings%: {save_pct:.1f}%)")
                      
        # Count elite players
        elite_count = sum(1 for rating in self.player_elos.values() 
                         if rating >= self.rating_bounds['elite_threshold'])
        legendary_count = sum(1 for rating in self.player_elos.values() 
                             if rating >= self.rating_bounds['legendary_threshold'])
        max_rating_count = sum(1 for rating in self.player_elos.values() 
                              if rating >= self.rating_bounds['max'])
        
        # Update system stats
        self.system_stats['elite_players'] = elite_count
        self.system_stats['legendary_players'] = legendary_count
        
        # FORBEDRET SYSTEM PERFORMANCE med momentum statistikker
        print(f"\n‚ö° SYSTEM PERFORMANCE:")
        print(f"üìà Actions processeret: {self.system_stats['actions_processed']:,}")
        print(f"üîÑ Rating √¶ndringer: {self.system_stats['rating_changes']:,}")
        print(f"üéØ √Ündring ratio: {self.system_stats['rating_changes']/self.system_stats['actions_processed']*100:.1f}%")
        print(f"üí• Ultra-kritiske √∏jeblikke (>2.5x): {self.system_stats['ultra_critical_moments']:,}")
        print(f"üî• Kritiske √∏jeblikke (>2.0x): {self.system_stats['critical_moments']:,}")
        print(f"‚ö° H√∏j kontekst (>1.5x): {self.system_stats['high_context_actions']:,}")
        
        # NYE MOMENTUM STATISTIKKER
        momentum_stats = self.system_stats['momentum_situations']
        print(f"\nüé≠ MOMENTUM SITUATIONER:")
        print(f"üìà Comeback situationer: {momentum_stats['comebacks']:,}")
        print(f"üìâ F√∏ring-smid situationer: {momentum_stats['lead_losses']:,}")
        print(f"üëë Lederskifte situationer: {momentum_stats['leadership_changes']:,}")
        print(f"üí• Kritiske fejl situationer: {momentum_stats['critical_errors']:,}")
        
        # ELITE SPILLERE STATISTIKKER
        print(f"\nüèÜ ELITE SPILLERE FORDELING:")
        print(f"‚≠ê Elite spillere (‚â•{self.rating_bounds['elite_threshold']}): {elite_count:,}")
        print(f"üåü Legendariske spillere (‚â•{self.rating_bounds['legendary_threshold']}): {legendary_count:,}")
        print(f"üëë Max rating spillere ({self.rating_bounds['max']}): {max_rating_count:,}")
        print(f"üéØ H√∏jeste rating opn√•et: {self.system_stats['max_rating_reached']:.0f}")
        
        # FORBEDRET KONTEKST STATISTIKKER
        total_actions = self.system_stats['actions_processed']
        if total_actions > 0:
            ultra_critical_pct = self.system_stats['ultra_critical_moments'] / total_actions * 100
            critical_pct = self.system_stats['critical_moments'] / total_actions * 100
            high_context_pct = self.system_stats['high_context_actions'] / total_actions * 100
            elite_pct = elite_count / len(self.player_elos) * 100 if self.player_elos else 0
            legendary_pct = legendary_count / len(self.player_elos) * 100 if self.player_elos else 0
            
            # Momentum situation percentages
            momentum_stats = self.system_stats['momentum_situations']
            comeback_pct = momentum_stats['comebacks'] / total_actions * 100
            lead_loss_pct = momentum_stats['lead_losses'] / total_actions * 100
            leadership_change_pct = momentum_stats['leadership_changes'] / total_actions * 100
            critical_error_pct = momentum_stats['critical_errors'] / total_actions * 100
            
            print(f"üìä Ultra-kritiske √∏jeblikke: {ultra_critical_pct:.2f}% af alle aktioner")
            print(f"üìä Kritiske √∏jeblikke: {critical_pct:.1f}% af alle aktioner")
            print(f"üìä H√∏j kontekst aktioner: {high_context_pct:.1f}% af alle aktioner")
            print(f"üìä Elite spillere: {elite_pct:.1f}% af alle spillere")
            print(f"üìä Legendariske spillere: {legendary_pct:.2f}% af alle spillere")
            print(f"üìä Comeback situationer: {comeback_pct:.2f}% af alle aktioner")
            print(f"üìä F√∏ring-smid situationer: {lead_loss_pct:.2f}% af alle aktioner")
            print(f"üìä Lederskifte situationer: {leadership_change_pct:.2f}% af alle aktioner")
            print(f"üìä Kritiske fejl situationer: {critical_error_pct:.2f}% af alle aktioner")
        
    def save_master_ratings(self):
        """Gemmer master ratings"""
        print("\nüíæ GEMMER MASTER RATINGS")
        print("-" * 40)
        
        # === TEAM RATINGS ===
        team_data = []
        for team, rating in sorted(self.team_elos.items(),
                                 key=lambda x: x[1], reverse=True):
            team_data.append({
                'team': team,
                'master_elo': round(rating, 1),
                'games_played': self.team_games[team]
            })
            
        team_df = pd.DataFrame(team_data)
        team_df.to_csv('master_team_elo_ratings.csv', index=False)
        print(f"‚úÖ Team ratings: master_team_elo_ratings.csv ({len(team_df)} teams)")
        
        # === PLAYER RATINGS ===
        player_data = []
        for player, rating in sorted(self.player_elos.items(),
                                   key=lambda x: x[1], reverse=True):
            positions = self.player_positions[player]
            primary_pos = positions.most_common(1)[0][0] if positions else 'PL'
            pos_name = self.standard_positions.get(primary_pos, 'Unknown')
            
            # M√•lvogter info
            is_goalkeeper = player in self.confirmed_goalkeepers
            momentum = self.get_momentum_multiplier(player)
            
            # Elite status
            if rating >= self.rating_bounds['max']:
                elite_status = "MAX"
            elif rating >= self.rating_bounds['legendary_threshold']:
                elite_status = "LEGENDARY"  
            elif rating >= self.rating_bounds['elite_threshold']:
                elite_status = "ELITE"
            else:
                elite_status = "NORMAL"
            
            # M√•lvogter stats
            if is_goalkeeper:
                stats = self.goalkeeper_stats[player]
                saves = stats.get('saves', 0)
                penalty_saves = stats.get('penalty_saves', 0)
                goals_against = stats.get('goals_against', 0)
                save_percentage = saves / (saves + goals_against) * 100 if (saves + goals_against) > 0 else 0
            else:
                saves = penalty_saves = goals_against = save_percentage = 0
            
            player_data.append({
                'player': player,
                'master_elo': round(rating, 1),
                'elite_status': elite_status,
                'primary_position': primary_pos,
                'position_name': pos_name,
                'is_goalkeeper': is_goalkeeper,
                'position_games': positions[primary_pos] if positions else 0,
                'total_actions': sum(positions.values()) if positions else 0,
                'momentum_factor': round(momentum, 3),
                'saves': saves,
                'penalty_saves': penalty_saves,
                'goals_against': goals_against,
                'save_percentage': round(save_percentage, 1)
            })
            
        player_df = pd.DataFrame(player_data)
        player_df.to_csv('master_player_elo_ratings.csv', index=False)
        print(f"‚úÖ Player ratings: master_player_elo_ratings.csv ({len(player_df)} spillere)")
        
        # === MATCH RESULTS ===
        if self.match_results:
            match_df = pd.DataFrame(self.match_results)
            match_df.to_csv('master_match_elo_results.csv', index=False)
            print(f"‚úÖ Match results: master_match_elo_results.csv ({len(match_df)} kampe)")
            
        print("üíæ Alle master ratings gemt!")

    # === VALIDATION SYSTEM FOR DATA.MD COMPLIANCE ===
    # Tilf√∏jer omfattende validering for at sikre korrekt implementering

    def validate_data_md_compliance(self):
        """
        üîç OMFATTENDE VALIDERING AF DATA.MD COMPLIANCE
        Sikrer at alle h√¶ndelser tildeles korrekte personer
        """
        print("\nüîç STARTER OMFATTENDE DATA.MD COMPLIANCE VALIDERING")
        print("=" * 60)
        
        # Test cases baseret p√• data.md eksempler
        validation_errors = []
        
        # === TEST 1: PRIM√ÜR H√ÜNDELSE LOGIK ===
        print("üß™ TEST 1: Prim√¶r h√¶ndelse (haendelse_1, navn_1)")
        
        test_event_1 = {
            'tid': '2.29',
            'hold': 'EHA', 
            'haendelse_1': 'M√•l',
            'nr_1': '10',
            'navn_1': 'Sofie LASSEN',
            'haendelse_2': '',
            'nr_2': '',
            'navn_2': '',
            'nr_mv': '1',
            'mv': 'Test M√ÖLVOGTER'
        }
        
        players = self.determine_player_team(test_event_1)
        
        # Valider prim√¶r spiller
        primary_found = False
        goalkeeper_found = False
        
        for player_name, team, is_goalkeeper in players:
            if player_name == 'Sofie LASSEN':
                primary_found = True
                if team != 'EHA':
                    validation_errors.append(f"FEJL: Prim√¶r spiller {player_name} tildelt forkert hold: {team} (forventet: EHA)")
                else:
                    print(f"  ‚úÖ Prim√¶r spiller korrekt: {player_name} ‚Üí {team}")
                
            elif player_name == 'Test M√ÖLVOGTER':
                goalkeeper_found = True
                if team != "OPPONENT":
                    validation_errors.append(f"FEJL: M√•lvogter {player_name} ikke tildelt OPPONENT: {team}")
                else:
                    print(f"  ‚úÖ M√•lvogter korrekt: {player_name} ‚Üí modstanderhold")
        
        if not primary_found:
            validation_errors.append("FEJL: Prim√¶r spiller ikke fundet")
        if not goalkeeper_found:
            validation_errors.append("FEJL: M√•lvogter ikke fundet")
        
        # === TEST 2: SEKUND√ÜR H√ÜNDELSE - SAMME HOLD ===
        print("\nüß™ TEST 2: Sekund√¶r h√¶ndelse - Assist (samme hold)")
        
        test_event_2 = {
            'tid': '7.19',
            'hold': 'RIN',
            'haendelse_1': 'M√•l',
            'nr_1': '9',
            'navn_1': 'M√•lscorer TEST',
            'haendelse_2': 'Assist',
            'nr_2': '3', 
            'navn_2': 'Maria Berger WIERZBA',
            'nr_mv': '',
            'mv': ''
        }
        
        players = self.determine_player_team(test_event_2)
        
        assist_correct = False
        scorer_correct = False
        
        for player_name, team, is_goalkeeper in players:
            if player_name == 'Maria Berger WIERZBA':
                assist_correct = True
                if team != 'RIN':
                    validation_errors.append(f"FEJL: Assist spiller {player_name} forkert hold: {team} (forventet: RIN)")
                else:
                    print(f"  ‚úÖ Assist spiller korrekt: {player_name} ‚Üí {team}")
            elif player_name == 'M√•lscorer TEST':
                scorer_correct = True
                if team != 'RIN':
                    validation_errors.append(f"FEJL: M√•lscorer {player_name} forkert hold: {team}")
                else:
                    print(f"  ‚úÖ M√•lscorer korrekt: {player_name} ‚Üí {team}")
        
        if not assist_correct:
            validation_errors.append("FEJL: Assist spiller ikke fundet")
        if not scorer_correct:
            validation_errors.append("FEJL: M√•lscorer ikke fundet")
        
        # === TEST 3: SEKUND√ÜR H√ÜNDELSE - MODSTANDERHOLD ===
        print("\nüß™ TEST 3: Sekund√¶r h√¶ndelse - Bold erobret (modstanderhold)")
        
        test_event_3 = {
            'tid': '12.36',
            'hold': 'NFH',
            'haendelse_1': 'Fejlaflevering',
            'nr_1': '7',
            'navn_1': 'Amalie WULFF',
            'haendelse_2': 'Bold erobret',
            'nr_2': '3',
            'navn_2': 'Maria Berger WIERZBA',
            'nr_mv': '',
            'mv': ''
        }
        
        players = self.determine_player_team(test_event_3)
        
        bold_erobret_correct = False
        fejlaflevering_correct = False
        
        for player_name, team, is_goalkeeper in players:
            if player_name == 'Maria Berger WIERZBA':
                bold_erobret_correct = True
                if team != "OPPONENT":
                    validation_errors.append(f"FEJL: Bold erobret spiller {player_name} ikke OPPONENT: {team}")
                else:
                    print(f"  ‚úÖ Bold erobret korrekt: {player_name} ‚Üí modstanderhold")
            elif player_name == 'Amalie WULFF':
                fejlaflevering_correct = True
                if team != 'NFH':
                    validation_errors.append(f"FEJL: Fejlaflevering spiller {player_name} forkert hold: {team}")
                else:
                    print(f"  ‚úÖ Fejlaflevering korrekt: {player_name} ‚Üí {team}")
        
        if not bold_erobret_correct:
            validation_errors.append("FEJL: Bold erobret spiller ikke fundet")
        if not fejlaflevering_correct:
            validation_errors.append("FEJL: Fejlaflevering spiller ikke fundet")
        
        # === TEST 4: M√ÖLVOGTER PENALTY LOGIK ===
        print("\nüß™ TEST 4: M√•lvogter penalty ved m√•l MOD m√•lvogteren")
        
        # Test at m√•lvogter f√•r negative point n√•r der scores mod dem
        test_goalkeeper = "TEST_GOALKEEPER"
        self.confirmed_goalkeepers.add(test_goalkeeper)
        
        # Test m√•l MOD m√•lvogteren (skal v√¶re negativt)
        # M√•lvogtere starter p√• default_goalkeeper rating
        if test_goalkeeper not in self.player_elos:
            self.player_elos[test_goalkeeper] = self.rating_bounds['default_goalkeeper']
        initial_rating = self.player_elos[test_goalkeeper]
        
        # Process et m√•l MOD m√•lvogteren
        print(f"    Tester: {test_goalkeeper} f√•r m√•l scoret MOD sig")
        print(f"    Forventet: NEGATIVT rating √¶ndring")
        print(f"    Initial rating: {initial_rating:.1f}")
        
        self.process_action(
            action="M√•l",
            player_name=test_goalkeeper,
            team="TEST_OPPONENT", 
            position="MV",
            time_str="30.0",
            home_score=15,
            away_score=15,
            is_goalkeeper=True,
            home_team="HOME",
            away_team="AWAY"
        )
        
        final_rating = self.player_elos[test_goalkeeper]
        rating_change = final_rating - initial_rating
        
        print(f"    Final rating: {final_rating:.1f}")
        print(f"    Rating √¶ndring: {rating_change:+.1f}")
        
        if rating_change >= 0:
            validation_errors.append(f"FEJL: M√•lvogter fik POSITIVE point ({rating_change:+.1f}) for m√•l MOD sig")
        else:
            print(f"  ‚úÖ M√•lvogter korrekt negative point: {rating_change:+.1f} for m√•l MOD sig")
        
        # === TEST 5: ACTION WEIGHT VALIDATION ===
        print("\nüß™ TEST 5: Action v√¶gte og m√•lvogter penalty v√¶gte")
        
        # Tjek at alle data.md h√¶ndelser er d√¶kket
        data_md_events = [
            'M√•l', 'Skud reddet', 'Fejlaflevering', 'Tilkendt straffe', 'Regelfejl',
            'M√•l p√• straffe', 'Skud forbi', 'Time out', 'Udvisning', 'Skud p√• stolpe',
            'Skud blokeret', 'Tabt bold', 'Advarsel', 'Straffekast reddet',
            'Start 2:e halvleg', 'Halvleg', 'Start 1:e halvleg', 'Passivt spil',
            'Straffekast p√• stolpe', 'Fuld tid', 'Kamp slut', 'Straffekast forbi',
            'Video Proof', 'Video Proof slut', 'R√∏dt kort, direkte', 'R√∏dt kort',
            'Bl√•t kort', 'Protest', 'Start', 'Udvisning (2x)'
        ]
        
        missing_weights = []
        for event in data_md_events:
            if event not in self.action_weights:
                missing_weights.append(event)
        
        if missing_weights:
            validation_errors.append(f"FEJL: Manglende action v√¶gte: {missing_weights}")
        else:
            print(f"  ‚úÖ Alle {len(data_md_events)} data.md h√¶ndelser har v√¶gte")
        
        # Tjek m√•lvogter penalty v√¶gte
        goalkeeper_events = ['M√•l', 'M√•l p√• straffe', 'Skud p√• stolpe', 'Straffekast p√• stolpe']
        missing_gk_weights = []
        for event in goalkeeper_events:
            if event not in self.goalkeeper_penalty_weights:
                missing_gk_weights.append(event)
        
        if missing_gk_weights:
            validation_errors.append(f"FEJL: Manglende m√•lvogter penalty v√¶gte: {missing_gk_weights}")
        else:
            print(f"  ‚úÖ Alle kritiske m√•lvogter penalty h√¶ndelser har v√¶gte")
        
        # === TEST 6: POSITION SYSTEM VALIDATION ===
        print("\nüß™ TEST 6: Position system validation")
        
        print(f"  ‚úÖ Pure positioner: {self.pure_positions}")
        print(f"  ‚úÖ Position system aktivt (ingen mapping n√∏dvendig)")
        
        # === VALIDATIONS RESULTAT ===
        print(f"\nüéØ VALIDERINGS RESULTAT:")
        print("=" * 60)
        
        if validation_errors:
            print(f"‚ùå FUNDET {len(validation_errors)} VALIDERINGSFEJL:")
            for i, error in enumerate(validation_errors, 1):
                print(f"  {i}. {error}")
            print("\n‚ö†Ô∏è  SYSTEMET KR√ÜVER RETTELSER F√òR BRUG!")
            return False
        else:
            print("‚úÖ ALLE VALIDERINGER BEST√ÖET!")
            print("üéØ Systemet f√∏lger data.md strukturen 100% korrekt")
            print("‚úÖ Prim√¶re h√¶ndelser tildeles korrekt")
            print("‚úÖ Sekund√¶re h√¶ndelser f√∏lger samme/modstander logik")
            print("‚úÖ M√•lvogtere f√•r negative point ved m√•l MOD dem")
            print("‚úÖ Alle data.md h√¶ndelser er d√¶kket")
            print("‚úÖ Position system aktiv (kun rene positioner)")
            return True

    def create_detailed_event_log(self, event_data: dict, players_found: list):
        """
        üìù DETALJERET EVENT LOG FOR DEBUGGING
        Logger pr√¶cist hvordan hver h√¶ndelse bliver processeret
        """
        action = str(event_data.get('haendelse_1', '')).strip()
        if action in ['Halvleg', 'Start 1:e halvleg', 'Start 2:e halvleg', 
                      'Fuld tid', 'Kamp slut', '', 'nan']:
            return  # Skip administrative events
        
        hold = str(event_data.get('hold', '')).strip()
        haendelse_2 = str(event_data.get('haendelse_2', '')).strip()
        
        print(f"\nüìù EVENT LOG: {action} @ tid {event_data.get('tid', '0')}")
        print(f"   üè† Hold: {hold}")
        
        for i, (player_name, team, is_goalkeeper) in enumerate(players_found, 1):
            gk_marker = "ü•Ö" if is_goalkeeper else "üèÉ"
            if team == "OPPONENT":
                team_desc = f"modstanderhold (ikke {hold})"
            else:
                team_desc = team
            
            print(f"   {gk_marker} Spiller {i}: {player_name} ‚Üí {team_desc}")
            
            # Vis hvilken v√¶gt der vil blive brugt
            if is_goalkeeper and action in self.goalkeeper_penalty_weights:
                weight = self.goalkeeper_penalty_weights[action]
                print(f"       üí• M√•lvogter penalty v√¶gt: {weight} (NEGATIVT for m√•l MOD)")
            else:
                weight = self.action_weights.get(action, 0)
                print(f"       ‚öñÔ∏è Normal v√¶gt: {weight}")
        
        if haendelse_2:
            print(f"   üîÑ Sekund√¶r h√¶ndelse: {haendelse_2}")

# === MAIN EXECUTION ===
if __name__ == "__main__":
    print("üèÜ Starter Master H√•ndbol Elo System")
    print("=" * 60)
    
    # Initialiser master system
    elo_system = MasterHandballEloSystem()
    
    # üîç F√òRST: OMFATTENDE VALIDERING AF DATA.MD COMPLIANCE
    validation_passed = elo_system.validate_data_md_compliance()
    
    if not validation_passed:
        print("\n‚ùå VALIDATION FEJLEDE - STOPPER SYSTEM!")
        print("Ret fejlene f√∏r systemet kan bruges.")
        exit(1)
    
    print("\nüöÄ VALIDERING BEST√ÖET - STARTER MASTER BEREGNING")
    print("=" * 60)
    
    # Beregn alle s√¶soner
    elo_system.calculate_all_seasons()
    
    print("\nüéØ MASTER SYSTEM KOMPLET!")
    print("=" * 60)
    print("üìÅ Output filer:")
    print("  ‚Ä¢ master_team_elo_ratings.csv")
    print("  ‚Ä¢ master_player_elo_ratings.csv")
    print("  ‚Ä¢ master_match_elo_results.csv")
    print()
    print("üî¨ Master features kombineret:")
    print("  ‚úÖ Korrekt m√•lvogter identification (nr_mv/mv felter)")
    print("  ‚úÖ 7 standard h√•ndboldpositioner")
    print("  ‚úÖ Optimerede action v√¶gte for alle positioner")
    print("  ‚úÖ Kontekst-afh√¶ngig v√¶gtning (tid + score)")
    print("  ‚úÖ Momentum tracking med decay factor")
    print("  ‚úÖ Linear Elo model (bias reduktion)")
    print("  ‚úÖ M√•lvogter bonuser (1.9x-2.3x for redninger)")
    print("  ‚úÖ Stabile K-faktorer (16/7/4)")
    print("  ‚úÖ Robuste rating bounds (900-1600)")
    print("  ‚úÖ Avanceret error handling")
    print("  ‚úÖ Detaljerede performance statistikker")
    print("\nüèÜ DET ULTIMATIVE H√ÖNDBOL ELO SYSTEM!") 