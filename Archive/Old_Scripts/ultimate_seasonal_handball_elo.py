#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üèÜ ULTIMATIVT S√ÜSON-BASERET H√ÖNDBOL ELO SYSTEM
=================================================

BYGGER P√Ö MASTER ELO SYSTEMET MED TILF√òJELSE AF:
‚úÖ S√¶son-for-s√¶son processering 
‚úÖ Intelligent regression to mean mellem s√¶soner
‚úÖ Detaljerede per-s√¶son CSV filer
‚úÖ Karriere tracking p√• tv√¶rs af s√¶soner  
‚úÖ Robust fejlh√•ndtering og debugging
‚úÖ Positionsbalance analyse per s√¶son
‚úÖ Elite spillere skal pr√¶stere for at bevare rating

REGRESSION TO MEAN FILOSOFI:
- H√∏jtratede spillere f√•r bedre startposition n√¶ste s√¶son
- Men ikke s√• h√∏jt at d√•rlig performance ikke straffes  
- Progressiv regression baseret p√• distance fra gennemsnit
- Spillere med f√• kampe f√•r mere regression
- Sikrer fair konkurrence p√• tv√¶rs af s√¶soner

AI Assistant - December 2024
"""

import pandas as pd
import numpy as np
import sqlite3
import os
from collections import defaultdict, Counter
from typing import Dict, List, Tuple, Optional
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# === KONFIGURATION ===
BASE_RATING = 1200
MIN_GAMES_FOR_FULL_CARRY = 15    # Mindst 15 kampe for fuld carry-over
MAX_CARRY_BONUS = 150            # Max +150 bonus fra forrige s√¶son
MIN_CARRY_PENALTY = -100         # Max -100 straf fra forrige s√¶son
REGRESSION_STRENGTH = 0.75       # 75% regression to mean

class UltimateSeasonalHandballEloSystem:
    """
    üèÜ ULTIMATIVT S√ÜSON-BASERET ELO SYSTEM
    """
    
    def __init__(self, base_dir: str = "."):
        print("üèÜ ULTIMATIVT S√ÜSON-BASERET H√ÖNDBOL ELO SYSTEM")
        print("=" * 70)
        
        self.base_dir = base_dir
        
        # S√¶son data storage
        self.all_season_results = {}
        self.player_career_data = defaultdict(list)
        
        # Database directories
        self.herreliga_dir = os.path.join(base_dir, "Herreliga-database")
        self.kvindeliga_dir = os.path.join(base_dir, "Kvindeliga-database")
        
        # Available seasons (inkluderer 2017-2018)
        self.seasons = [
            "2017-2018", "2018-2019", "2019-2020", "2020-2021", 
            "2021-2022", "2022-2023", "2023-2024", "2024-2025"
        ]
        
        # Validate seasons exist
        self.validate_season_availability()
        
        print("‚úÖ Ultimate Seasonal ELO system initialiseret")
        print(f"üìÖ Tilg√¶ngelige s√¶soner: {len(self.seasons)}")
        print(f"üéØ Base rating: {BASE_RATING}")
        print(f"üìä Regression styrke: {REGRESSION_STRENGTH}")
        print(f"üîÑ Min games for full carry: {MIN_GAMES_FOR_FULL_CARRY}")
        
    def validate_season_availability(self):
        """Validerer at s√¶soner findes i database"""
        print(f"\nüîç VALIDERER S√ÜSON TILG√ÜNGELIGHED")
        print("-" * 50)
        
        valid_seasons = []
        
        for season in self.seasons:
            herreliga_path = os.path.join(self.herreliga_dir, season)
            kvindeliga_path = os.path.join(self.kvindeliga_dir, season)
            
            herreliga_files = 0
            kvindeliga_files = 0
            
            if os.path.exists(herreliga_path):
                herreliga_files = len([f for f in os.listdir(herreliga_path) if f.endswith('.db')])
                
            if os.path.exists(kvindeliga_path):
                kvindeliga_files = len([f for f in os.listdir(kvindeliga_path) if f.endswith('.db')])
                
            total_files = herreliga_files + kvindeliga_files
            
            if total_files > 0:
                valid_seasons.append(season)
                print(f"  ‚úÖ {season}: {total_files} kampe (H:{herreliga_files}, K:{kvindeliga_files})")
            else:
                print(f"  ‚ùå {season}: ingen data")
                
        self.seasons = valid_seasons
        print(f"\nüìä {len(self.seasons)} gyldige s√¶soner klar til processering")
        
    def calculate_intelligent_start_rating(self, player_name: str, 
                                         previous_season_data: Dict = None,
                                         league_avg: float = None) -> float:
        """
        üß† INTELLIGENT START RATING BEREGNING MED REGRESSION TO MEAN
        
        Faktorer der p√•virker start rating:
        1. Forrige s√¶son final rating
        2. Antal kampe spillet (spillere med f√• kampe f√•r mere regression)
        3. Distance fra ligagennemsnit (ekstreme ratings regresses mere)
        4. Elite status (h√∏je ratings skal arbejde h√•rdere for at beholde dem)
        """
        
        if not previous_season_data:
            return BASE_RATING
            
        prev_rating = previous_season_data.get('final_rating', BASE_RATING)
        prev_games = previous_season_data.get('games', 0)
        prev_elite_status = previous_season_data.get('elite_status', 'NORMAL')
        
        # Hvis ingen tidligere rating, start p√• base
        if prev_rating == BASE_RATING:
            return BASE_RATING
            
        # === REGRESSION TARGET ===
        mean_rating = league_avg if league_avg else BASE_RATING
        distance_from_mean = prev_rating - mean_rating
        
        # === GAMES FACTOR ===
        # Spillere med flere kampe f√•r mindre regression
        if prev_games >= MIN_GAMES_FOR_FULL_CARRY:
            games_factor = 1.0  # Fuld carry-over
        elif prev_games >= 10:
            # Gradueret mellem 10-15 kampe
            games_factor = 0.6 + 0.4 * (prev_games - 10) / (MIN_GAMES_FOR_FULL_CARRY - 10)
        elif prev_games >= 5:
            # Minimal carry-over
            games_factor = 0.3 + 0.3 * (prev_games - 5) / 5
        else:
            games_factor = 0.2  # Meget lav carry-over for f√• kampe
            
        # === ELITE STATUS FACTOR ===
        # Elite spillere skal arbejde h√•rdere for at beholde h√∏j rating
        if prev_elite_status == 'LEGENDARY':
            elite_factor = 0.6  # St√¶rk regression for legendary
        elif prev_elite_status == 'ELITE':
            elite_factor = 0.75  # Moderat regression for elite
        else:
            elite_factor = 0.9   # Minimal regression for normale
            
        # === DISTANCE FACTOR ===
        # Progressive regression baseret p√• distance
        abs_distance = abs(distance_from_mean)
        if abs_distance > 500:
            distance_factor = 0.4  # Ekstremt st√¶rk regression
        elif abs_distance > 350:
            distance_factor = 0.55  # St√¶rk regression
        elif abs_distance > 200:
            distance_factor = 0.7   # Moderat regression
        elif abs_distance > 100:
            distance_factor = 0.85  # Svag regression
        else:
            distance_factor = 0.95  # Minimal regression
            
        # === KOMBINER ALLE FAKTORER ===
        combined_factor = games_factor * elite_factor * distance_factor
        
        # Beregn ny start rating
        regressed_distance = distance_from_mean * combined_factor
        new_start_rating = mean_rating + regressed_distance
        
        # === APPLY CAPS ===
        rating_change = new_start_rating - BASE_RATING
        
        if rating_change > MAX_CARRY_BONUS:
            new_start_rating = BASE_RATING + MAX_CARRY_BONUS
        elif rating_change < MIN_CARRY_PENALTY:
            new_start_rating = BASE_RATING + MIN_CARRY_PENALTY
            
        # Debug for betydelige √¶ndringer
        total_change = new_start_rating - prev_rating
        if abs(total_change) > 75:
            print(f"    üìä {player_name}: {prev_rating:.0f} ‚Üí {new_start_rating:.0f} "
                  f"({total_change:+.0f}) [{prev_games} kampe, {prev_elite_status}]")
                  
        return round(new_start_rating, 1)
        
    def run_master_for_season(self, season: str, start_ratings: Dict = None) -> Dict:
        """
        K√∏rer master ELO systemet for en enkelt s√¶son
        """
        print(f"\nüèê PROCESSERER S√ÜSON {season}")
        print("-" * 50)
        
        try:
            # Import master system
            from handball_elo_master import MasterHandballEloSystem
            
            # Create fresh instance for this season
            master_system = MasterHandballEloSystem(self.base_dir)
            
            # Set start ratings if provided
            if start_ratings:
                print(f"üìà S√¶tter start ratings for {len(start_ratings)} spillere")
                for player_name, start_rating in start_ratings.items():
                    master_system.player_elos[player_name] = start_rating
                    # Set goalkeeper default if applicable
                    if player_name in master_system.confirmed_goalkeepers:
                        if start_rating == BASE_RATING:
                            master_system.player_elos[player_name] = master_system.rating_bounds['default_goalkeeper']
            
            # Process both leagues for this season
            total_matches = 0
            
            # Herreliga
            herreliga_matches = master_system.process_season_database(season)
            if herreliga_matches > 0:
                total_matches += herreliga_matches
                print(f"  ‚úÖ Herreliga: {herreliga_matches} kampe")
            
            # Kvindeliga (modify master system to handle kvindeliga)
            kvindeliga_path = os.path.join(self.kvindeliga_dir, season)
            if os.path.exists(kvindeliga_path):
                original_dir = master_system.database_dir
                master_system.database_dir = self.kvindeliga_dir
                kvindeliga_matches = master_system.process_season_database(season)
                master_system.database_dir = original_dir
                
                if kvindeliga_matches > 0:
                    total_matches += kvindeliga_matches
                    print(f"  ‚úÖ Kvindeliga: {kvindeliga_matches} kampe")
            
            if total_matches == 0:
                print(f"‚ùå Ingen kampe processeret for {season}")
                return {}
                
            print(f"‚úÖ Total: {total_matches} kampe processeret")
            
            # Generate season results
            season_results = {}
            
            for player_name, final_rating in master_system.player_elos.items():
                games = master_system.player_games.get(player_name, 0)
                
                # Only include players who actually played
                if games > 0:
                    start_rating = start_ratings.get(player_name, BASE_RATING) if start_ratings else BASE_RATING
                    
                    # Find primary position
                    positions = master_system.player_positions[player_name]
                    primary_position = positions.most_common(1)[0][0] if positions else 'PL'
                    
                    # Position info
                    position_name = master_system.standard_positions.get(primary_position, 'Unknown')
                    is_goalkeeper = player_name in master_system.confirmed_goalkeepers
                    
                    # Elite status
                    if final_rating >= master_system.rating_bounds['legendary_threshold']:
                        elite_status = "LEGENDARY"
                    elif final_rating >= master_system.rating_bounds['elite_threshold']:
                        elite_status = "ELITE"
                    else:
                        elite_status = "NORMAL"
                    
                    # Momentum
                    momentum = master_system.get_momentum_multiplier(player_name)
                    
                    season_results[player_name] = {
                        'season': season,
                        'player': player_name,
                        'start_rating': round(start_rating, 1),
                        'final_rating': round(final_rating, 1),
                        'rating_change': round(final_rating - start_rating, 1),
                        'games': games,
                        'primary_position': primary_position,
                        'position_name': position_name,
                        'is_goalkeeper': is_goalkeeper,
                        'elite_status': elite_status,
                        'momentum_factor': round(momentum, 3),
                        'total_actions': sum(positions.values()) if positions else 0
                    }
                    
            return season_results
            
        except Exception as e:
            print(f"‚ùå Fejl i s√¶son {season}: {e}")
            return {}
            
    def analyze_position_balance(self, season_results: Dict, season: str):
        """
        Analyserer position balance for en s√¶son
        """
        print(f"\n‚öñÔ∏è POSITION BALANCE ANALYSE - {season}")
        print("-" * 50)
        
        if not season_results:
            print("‚ùå Ingen data til analyse")
            return
            
        # Group by position
        position_ratings = defaultdict(list)
        
        for player_data in season_results.values():
            position = player_data['primary_position']
            rating = player_data['final_rating']
            position_ratings[position].append(rating)
            
        # Calculate statistics
        position_stats = {}
        
        for position, ratings in position_ratings.items():
            if ratings:
                position_stats[position] = {
                    'count': len(ratings),
                    'mean': np.mean(ratings),
                    'std': np.std(ratings),
                    'min': min(ratings),
                    'max': max(ratings)
                }
        
        # Print analysis
        print("üìä Position statistikker:")
        for position in ['MV', 'VF', 'HF', 'VB', 'PL', 'HB', 'ST']:
            if position in position_stats:
                stats = position_stats[position]
                print(f"  {position} ({stats['count']:3d} spillere): "
                      f"{stats['mean']:6.0f} ¬±{stats['std']:4.0f} "
                      f"[{stats['min']:4.0f}-{stats['max']:4.0f}]")
        
        # Balance coefficient
        if len(position_stats) >= 3:
            means = [stats['mean'] for stats in position_stats.values()]
            overall_mean = np.mean(means)
            cv = np.std(means) / overall_mean * 100
            
            balance_status = "‚úÖ EXCELLENT" if cv < 8 else "‚úÖ GOOD" if cv < 15 else "‚ö†Ô∏è NEEDS WORK"
            print(f"\nüìä Balance koefficient: {cv:.1f}% ({balance_status})")
            
    def save_season_csv(self, season_results: Dict, season: str):
        """
        Gemmer s√¶son resultater til detaljeret CSV fil
        """
        if not season_results:
            return
            
        # Convert to DataFrame
        df = pd.DataFrame(list(season_results.values()))
        
        # Add additional columns
        df['rating_per_game'] = df['rating_change'] / df['games']
        df['performance_level'] = df['final_rating'].apply(
            lambda x: 'LEGENDARY' if x >= 2200 else 'ELITE' if x >= 1800 else 'NORMAL'
        )
        
        # Sort by final rating
        df = df.sort_values('final_rating', ascending=False)
        
        # Save to CSV
        filename = f'seasonal_elo_{season.replace("-", "_")}.csv'
        df.to_csv(filename, index=False)
        
        print(f"üíæ Gemt: {filename} ({len(df)} spillere)")
        
        # Show top performers
        print(f"\nüèÜ TOP 10 SPILLERE {season}:")
        for i, (_, row) in enumerate(df.head(10).iterrows(), 1):
            gk_icon = "ü•Ö" if row['is_goalkeeper'] else ""
            elite_badge = f"[{row['elite_status']}]" if row['elite_status'] != 'NORMAL' else ""
            
            print(f"  {i:2d}. {row['player']} {gk_icon}: {row['final_rating']:.0f} "
                  f"({row['rating_change']:+.0f}) {elite_badge}")
                  
    def run_complete_seasonal_analysis(self):
        """
        üöÄ HOVEDFUNKTION - K√∏rer komplet s√¶son-baseret analyse
        """
        print("\nüöÄ STARTER KOMPLET S√ÜSON-BASERET ANALYSE")
        print("=" * 70)
        
        previous_season_data = None
        
        for season in self.seasons:
            print(f"\nüìÖ === S√ÜSON {season} ===")
            
            # Calculate start ratings from previous season
            start_ratings = {}
            
            if previous_season_data:
                print(f"üìà Beregner start ratings fra {len(previous_season_data)} spillere")
                
                # Calculate league average
                prev_ratings = [data['final_rating'] for data in previous_season_data.values()]
                league_avg = np.mean(prev_ratings) if prev_ratings else BASE_RATING
                
                print(f"üìä Forrige s√¶son gennemsnit: {league_avg:.1f}")
                
                regression_stats = {'bonus': 0, 'penalty': 0, 'significant': 0}
                
                for player_name, player_data in previous_season_data.items():
                    start_rating = self.calculate_intelligent_start_rating(
                        player_name, player_data, league_avg
                    )
                    start_ratings[player_name] = start_rating
                    
                    # Track regression statistics
                    if start_rating > BASE_RATING:
                        regression_stats['bonus'] += 1
                    elif start_rating < BASE_RATING:
                        regression_stats['penalty'] += 1
                        
                    if abs(start_rating - player_data['final_rating']) > 50:
                        regression_stats['significant'] += 1
                        
                print(f"üìä Regression oversigt:")
                print(f"   ‚¨ÜÔ∏è {regression_stats['bonus']} spillere med bonus start")
                print(f"   ‚¨áÔ∏è {regression_stats['penalty']} spillere med penalty start")
                print(f"   üîÑ {regression_stats['significant']} spillere med betydelig regression")
            else:
                print("üìä F√∏rste s√¶son - alle starter p√• base rating")
                
            # Run master system for this season
            season_results = self.run_master_for_season(season, start_ratings)
            
            if not season_results:
                print(f"‚ö†Ô∏è Springer over {season} - ingen resultater")
                continue
                
            # Store results
            self.all_season_results[season] = season_results
            
            # Update player career data
            for player_name, player_data in season_results.items():
                self.player_career_data[player_name].append({
                    'season': season,
                    'final_rating': player_data['final_rating'],
                    'games': player_data['games'],
                    'position': player_data['primary_position']
                })
            
            # Analyze and save
            self.analyze_position_balance(season_results, season)
            self.save_season_csv(season_results, season)
            
            # Set up for next season
            previous_season_data = season_results
            
        # Generate final analyses
        self.generate_career_analysis()
        self.generate_summary_report()
        
    def generate_career_analysis(self):
        """
        Genererer karriere analyse p√• tv√¶rs af s√¶soner
        """
        print(f"\nüèÜ KARRIERE ANALYSE P√Ö TV√ÜRS AF S√ÜSONER")
        print("=" * 70)
        
        if not self.player_career_data:
            print("‚ùå Ingen karriere data tilg√¶ngelig")
            return
            
        # Find spillere med mindst 3 s√¶soner
        career_players = []
        
        for player_name, seasons_data in self.player_career_data.items():
            if len(seasons_data) >= 3:
                ratings = [s['final_rating'] for s in seasons_data]
                games = [s['games'] for s in seasons_data]
                
                career_stats = {
                    'player': player_name,
                    'seasons_played': len(seasons_data),
                    'avg_rating': round(np.mean(ratings), 1),
                    'peak_rating': round(max(ratings), 1),
                    'total_games': sum(games),
                    'career_change': round(ratings[-1] - ratings[0], 1),
                    'consistency': round(np.std(ratings), 1),
                    'primary_position': Counter([s['position'] for s in seasons_data]).most_common(1)[0][0]
                }
                
                career_players.append(career_stats)
                
        # Sort by average rating
        career_players.sort(key=lambda x: x['avg_rating'], reverse=True)
        
        print(f"üìä Fundet {len(career_players)} karriere spillere (‚â•3 s√¶soner)")
        
        # Show top 20 career players
        print(f"\nüèÜ TOP 20 KARRIERE SPILLERE:")
        for i, player in enumerate(career_players[:20], 1):
            trend = "üìà" if player['career_change'] > 50 else "üìâ" if player['career_change'] < -50 else "‚û°Ô∏è"
            consistency = "üéØ" if player['consistency'] < 50 else "üìä"
            
            print(f"  {i:2d}. {player['player']} ({player['primary_position']}): "
                  f"{player['avg_rating']:.0f} avg, peak {player['peak_rating']:.0f} "
                  f"({player['seasons_played']} s√¶soner) {trend}{player['career_change']:+.0f} {consistency}")
                  
        # Save career analysis
        career_df = pd.DataFrame(career_players)
        career_df.to_csv('ultimate_career_analysis.csv', index=False)
        print(f"\nüíæ Karriere analyse gemt: ultimate_career_analysis.csv")
        
    def generate_summary_report(self):
        """
        Genererer samlet rapport over alle s√¶soner
        """
        print(f"\nüìä SAMLET RAPPORT - ALLE S√ÜSONER")
        print("=" * 70)
        
        if not self.all_season_results:
            print("‚ùå Ingen s√¶sondata til rapport")
            return
            
        total_players = set()
        total_matches = 0
        season_summary = []
        
        for season, results in self.all_season_results.items():
            total_players.update(results.keys())
            season_matches = sum(player['games'] for player in results.values())
            
            ratings = [player['final_rating'] for player in results.values()]
            elite_count = sum(1 for r in ratings if r >= 1800)
            legendary_count = sum(1 for r in ratings if r >= 2200)
            
            season_summary.append({
                'season': season,
                'players': len(results),
                'total_games': season_matches,
                'avg_rating': round(np.mean(ratings), 1),
                'elite_players': elite_count,
                'legendary_players': legendary_count,
                'max_rating': round(max(ratings), 1)
            })
            
            total_matches += season_matches
            
        print(f"üèê SAMLET STATISTIK:")
        print(f"  üìä Total unikke spillere: {len(total_players):,}")
        print(f"  üèüÔ∏è Total kampe: {total_matches:,}")
        print(f"  üìÖ S√¶soner processeret: {len(self.all_season_results)}")
        
        print(f"\nüìÖ S√ÜSON OVERSIGT:")
        for s in season_summary:
            print(f"  {s['season']}: {s['players']:3d} spillere, {s['total_games']:3d} kampe, "
                  f"avg {s['avg_rating']:.0f} (E:{s['elite_players']}, L:{s['legendary_players']})")
                  
        # Save summary
        summary_df = pd.DataFrame(season_summary)
        summary_df.to_csv('seasonal_summary_report.csv', index=False)
        print(f"\nüíæ Rapport gemt: seasonal_summary_report.csv")
        
        print(f"\n‚úÖ ULTIMATIVT S√ÜSON-BASERET ANALYSE KOMPLET!")
        print("=" * 70)
        print("üìÅ Genererede filer:")
        for season in self.all_season_results.keys():
            print(f"  ‚Ä¢ seasonal_elo_{season.replace('-', '_')}.csv")
        print("  ‚Ä¢ ultimate_career_analysis.csv")
        print("  ‚Ä¢ seasonal_summary_report.csv")


# === MAIN EXECUTION ===
if __name__ == "__main__":
    print("üèÜ STARTER ULTIMATIVT S√ÜSON-BASERET H√ÖNDBOL ELO SYSTEM")
    print("=" * 80)
    
    # Create system instance
    seasonal_system = UltimateSeasonalHandballEloSystem()
    
    # Run complete analysis
    seasonal_system.run_complete_seasonal_analysis()
    
    print("\nüéâ ULTIMATIVT S√ÜSON-BASERET SYSTEM KOMPLET!")
    print("=" * 80)
    print("üéØ Implementerede features:")
    print("  ‚úÖ Intelligent regression to mean mellem s√¶soner")
    print("  ‚úÖ Progressiv regression baseret p√• elite status")
    print("  ‚úÖ Games-baseret carry-over faktorer")
    print("  ‚úÖ Per-s√¶son detaljerede CSV filer")
    print("  ‚úÖ Position balance analyse per s√¶son")
    print("  ‚úÖ Karriere tracking p√• tv√¶rs af s√¶soner")
    print("  ‚úÖ Robust fejlh√•ndtering og debugging")
    print("  ‚úÖ Elite spillere skal pr√¶stere for at beholde rating")
    print("  ‚úÖ Support for b√•de Herreliga og Kvindeliga")
    print("\nüèÜ S√ÜSON-BASERET ELO SIKRER FAIR KONKURRENCE!") 